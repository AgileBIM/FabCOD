{
  "KEYWORDS": {
    "FLOWCONTROL": {
      "values": [
        "IF",
        "THEN",
        "ELSE",
        "ELSE IF",
        "ELSEIF",
        "END IF",
        "ENDIF",
        "WHILE",
        "END WHILE",
        "ENDWHILE",
        "FOR",
        "TO",
        "STEP",
        "NEXT",
        "DO",
        "UNTIL",
        "LOOP",
        "SELECT",
        "CASE",
        "END SELECT",
        "ENDSELECT",
        "FUNCTION",
        "RETURN",
        "END FUNCTION",
        "ENDFUNCTION"
      ],
      "id": "FLOWCONTROL"
    },
    "VALUETYPES": {
      "values": [
        "TRUE",
        "FALSE",
        "NULL",
        "VOID"
      ],
      "id": "VALUETYPES"
    },
    "SPECIALTYPES": {
      "values": [
        "AND",
        "OR",
        "NOT",
        "AS",
        "IS",
        "NEW",
        "DIM",
        "OBJECT",
        "REQUIRES",
        "INCLUDE",
        "RUN",
        "BREAKPOINT"
      ],
      "id": "SPECIALTYPES"
    }
  },
  "FUNCTIONS": {
    "ACos": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Adjacent"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Hypotenuse"
        }
      ],
      "info": {
        "desc": "Get the inverse Cosine angle of Adj/Hyp.",
        "args": {
          "Adjacent": "",
          "Hypotenuse": ""
        },
        "returns": "number"
      },
      "id": "ACos"
    },
    "ASin": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Opposite"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Hypotenuse"
        }
      ],
      "info": {
        "desc": "Get the inverse Sine angle of Opp/Hyp.",
        "args": {
          "Opposite": "",
          "Hypotenuse": ""
        },
        "returns": "number"
      },
      "id": "ASin"
    },
    "ATan": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Opposite"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Adjacent"
        }
      ],
      "info": {
        "desc": "Get the inverse Tangent angle of Opp/Adj.",
        "args": {
          "Opposite": "",
          "Adjacent": ""
        },
        "returns": "number"
      },
      "id": "ATan"
    },
    "Cos": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Angle"
        }
      ],
      "info": {
        "desc": "Get the Cosine of angle.",
        "args": {
          "Angle": ""
        },
        "returns": "number"
      },
      "id": "Cos"
    },
    "Sin": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Angle"
        }
      ],
      "info": {
        "desc": "Get the Sine of angle.",
        "args": {
          "Angle": ""
        },
        "returns": "number"
      },
      "id": "Sin"
    },
    "Tan": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Angle"
        }
      ],
      "info": {
        "desc": "Get the Tangent of angle.",
        "args": {
          "Angle": ""
        },
        "returns": "number"
      },
      "id": "Tan"
    },
    "Exp": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Get the Inverse log of value (10 to the power of value).",
        "args": {
          "Value": ""
        },
        "returns": "number"
      },
      "id": "Exp"
    },
    "Log": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Get the log of value (base 10).",
        "args": {
          "Value": ""
        },
        "returns": "number"
      },
      "id": "Log"
    },
    "Number": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "ANY"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Forces extraction of Number from variable data types.",
        "args": {
          "Value": ""
        },
        "returns": "number"
      },
      "id": "Number"
    },
    "Pow": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "N"
        }
      ],
      "info": {
        "desc": "Get the value to the power of n.",
        "args": {
          "Value": "",
          "N": ""
        },
        "returns": "number"
      },
      "id": "Pow"
    },
    "Sign": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Get the sign of a number.",
        "args": {
          "Value": ""
        },
        "returns": "+1, -1, or 0 depending if value is positive, negative or very close to zero respectively."
      },
      "id": "Sign"
    },
    "Sqrt": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Get the Square root of the number.",
        "args": {
          "Value": ""
        },
        "returns": "number"
      },
      "id": "Sqrt"
    },
    "Sqr": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        }
      ],
      "info": {
        "desc": "Get the Square of the number passed (ie value x value).",
        "args": {
          "Value": ""
        },
        "returns": "number"
      },
      "id": "Sqr"
    },
    "Round": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": true,
          "notes": "Optional and defaults to zero (0).",
          "id": "DecimalPlaces"
        }
      ],
      "info": {
        "desc": "Get the value rounded number of decimalplaces (nearest up or down).",
        "args": {
          "Value": "",
          "DecimalPlaces": "Optional and defaults to zero (0)."
        },
        "returns": "Number rounded to the nearest number of decimal places."
      },
      "id": "Round"
    },
    "RoundDown": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": true,
          "notes": "Optional and defaults to zero (0).",
          "id": "DecimalPlaces"
        }
      ],
      "info": {
        "desc": "Get the number rounded down to number of decimal places.",
        "args": {
          "Value": "",
          "DecimalPlaces": "Optional and defaults to zero (0)."
        },
        "returns": "Number rounded down to the nearest number of decimal places."
      },
      "id": "RoundDown"
    },
    "RoundUp": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "Value"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": true,
          "notes": "Optional and defaults to zero (0).",
          "id": "DecimalPlaces"
        }
      ],
      "info": {
        "desc": "Get the value rounded up to number of decimal places.",
        "args": {
          "Value": "",
          "DecimalPlaces": "Optional and defaults to zero (0)."
        },
        "returns": "Number rounded up to the nearest number of decimal places."
      },
      "id": "RoundUp"
    },
    "Asc": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "Can be any length string,- but only the first character is evaluated.",
          "id": "FirstChar"
        }
      ],
      "info": {
        "desc": "Gets the ASCII numeric code from a string character.",
        "args": {
          "FirstChar": "Can be any length string,- but only the first character is evaluated."
        },
        "returns": "A number representing the ASCII code of the first character in the provided string.",
        "remarks": "This does not work with unicode characters. If you want an ASCII code from an index other than the first character\r\nthen you will have to use the MID() function to carve it out."
      },
      "id": "Asc"
    },
    "Ascii": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A number representing an ASCII character.",
          "id": "CharacterCode"
        }
      ],
      "info": {
        "desc": "Create a string with a non-enterable character code.",
        "args": {
          "CharacterCode": "A number representing an ASCII character."
        },
        "returns": "A single character String, code or non-enterable text represented by an ASCII character code.",
        "remarks": "This does not work with unicode characters, but is ideal generating tabs, line-feeds and other things\r\nthat aren't easily represented in double quoted strings."
      },
      "id": "Ascii"
    },
    "Chr": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The base string to be searched.",
          "id": "TextString"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "The numeric index of the character to return.",
          "id": "CharacterPosition"
        }
      ],
      "info": {
        "desc": "Returns string containing the character at the specified 1-based index of String txt.",
        "args": {
          "TextString": "The base string to be searched.",
          "CharacterPosition": "The numeric index of the character to return."
        },
        "returns": "A single character String.",
        "remarks": "The CharacterPosition argument is a 1-Based index: 1 = first character, 2 = second character, etc."
      },
      "id": "Chr"
    },
    "GetFileExt": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String representing a file name with or without the full path.",
          "id": "FileName"
        }
      ],
      "info": {
        "desc": "Extract file extension (including .) from filename / full path + filename.",
        "args": {
          "FileName": "A String representing a file name with or without the full path."
        },
        "returns": "A String of the file extension (including '.') of the specified filename/path.",
        "remarks": "File extension is returned including the dot [.] If no extension is specified, will return an empty string [\"\"].\r\nOptional path may use either backslash [\\] or forwardslash [/] seperators between directories."
      },
      "id": "GetFileExt"
    },
    "GetFileName": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String representing a file full path and name.",
          "id": "FilePathAndName"
        }
      ],
      "info": {
        "desc": "Extract filename path (including extension) full path + filename.",
        "args": {
          "FilePathAndName": "A String representing a file full path and name."
        },
        "returns": "A String of the file name including extension.",
        "remarks": "File name is returned including the extension.\r\nPath may use either backslash [\\] or forwardslash [/] seperators between directories."
      },
      "id": "GetFileName"
    },
    "InStr": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "The numeric index of the character to begin the search.",
          "id": "StartingFrom"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The base string to be searched.",
          "id": "SearchIn"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The value string to be located.",
          "id": "SearchFor"
        },
        {
          "types": [
            "BOOLEAN"
          ],
          "optional": true,
          "notes": "Optional and defaults to FALSE. If provided as TRUE, then \"CaSe SeNsItIvE\" would not match \"Case Sensitive\".",
          "id": "IsCaseSensitive"
        }
      ],
      "info": {
        "desc": "Extracts the first index location of a string if completely found within another string.",
        "args": {
          "StartingFrom": "The numeric index of the character to begin the search.",
          "SearchIn": "The base string to be searched.",
          "SearchFor": "The value string to be located.",
          "IsCaseSensitive": "Optional and defaults to FALSE. If provided as TRUE, then \"CaSe SeNsItIvE\" would not match \"Case Sensitive\"."
        },
        "returns": "A Number representing the first occurrence the SearchFor value was found in the SearchIn string or 0 if not found.",
        "remarks": "The StartingFrom argument and the subsequent return values are a 1-Based index: 1 = first character, 2 = second character, etc."
      },
      "id": "InStr"
    },
    "Left": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The text String to extract a SubString from.",
          "id": "TextString"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A number representing the length of the SubString desired.",
          "id": "Length"
        }
      ],
      "info": {
        "desc": "Get a SubString from the start of text String which is the specified number of characters in length.",
        "args": {
          "TextString": "The text String to extract a SubString from.",
          "Length": "A number representing the length of the SubString desired."
        },
        "returns": "A String the specified length starting from the beginning of the original text String."
      },
      "id": "Left"
    },
    "Len": {
      "returns": [
        "NUMBER"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to find the length of.",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Get the length of String.",
        "args": {
          "TextString": "A String to find the length of."
        },
        "returns": "A Number specifying the length of the String."
      },
      "id": "Len"
    },
    "Lower": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to convert to lower case.",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Convert a text String to all lower case.",
        "args": {
          "TextString": "A String to convert to lower case."
        },
        "returns": "A String converted to all lower case."
      },
      "id": "Lower"
    },
    "LTrim": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to trim leading spaces from (if any).",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Get a text String with any leading spaces removed.",
        "args": {
          "TextString": "A String to trim leading spaces from (if any)."
        },
        "returns": "A String with any leading spaces removed."
      },
      "id": "LTrim"
    },
    "Mid": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The text String to extract a SubString from.",
          "id": "SearchString"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "",
          "id": "StartingIndex"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A number representing the length of the SubString desired.",
          "id": "Length"
        }
      ],
      "info": {
        "desc": "Get a SubString from the middle of another string by specifying the start position and length.",
        "args": {
          "SearchString": "The text String to extract a SubString from.",
          "StartingFrom": "A Number (1-based index) for the starting character position to get the SubString from.",
          "Length": "A number representing the length of the SubString desired."
        },
        "returns": "A String the specified length starting from the specified character position.",
        "remarks": "The StartingFrom argument is a 1-Based index: 1 = first character, 2 = second character, etc.\r\nSimilar to SubString() except you specify a starting position and length."
      },
      "id": "Mid"
    },
    "Right": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The text String to extract a SubString from.",
          "id": "TextString"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A number representing the length of the SubString desired.",
          "id": "Length"
        }
      ],
      "info": {
        "desc": "Get a SubString from the end of a text String which is the specified number of characters in length.",
        "args": {
          "TextString": "The text String to extract a SubString from.",
          "Length": "A number representing the length of the SubString desired."
        },
        "returns": "A String the specified length starting from the end of the original text String."
      },
      "id": "Right"
    },
    "RTrim": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to trim trailing spaces from (if any).",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Get a text String with any trailing spaces removed.",
        "args": {
          "TextString": "A String to trim trailing spaces from (if any)."
        },
        "returns": "A String with any trailing spaces removed."
      },
      "id": "RTrim"
    },
    "SubString": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "The text String to extract a SubString from.",
          "id": "TextString"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A Number (1-based index) for the starting character position to get the SubString from.",
          "id": "StartingFrom"
        },
        {
          "types": [
            "NUMBER"
          ],
          "optional": false,
          "notes": "A number (1-based index) for the ending character position to get the substrinbg from.",
          "id": "EndingAt"
        }
      ],
      "info": {
        "desc": "Get a SubString, starting and ending at specified index positions.",
        "args": {
          "TextString": "The text String to extract a SubString from.",
          "StartingFrom": "A Number (1-based index) for the starting character position to get the SubString from.",
          "EndingAt": "A number (1-based index) for the ending character position to get the substrinbg from."
        },
        "returns": "A String the specified length starting from the specified character position.",
        "remarks": "The StartingFrom and EndingAt arguments are a 1-Based index: 1 = first character, 2 = second character, etc.\r\nSimilar to Mid() except you specify a starting position and length.\r\n0 or even negative values can be used for the index which is interpreted as 'from the end of the string (inclusive)'"
      },
      "id": "SubString"
    },
    "Trim": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to trim leading and trailing spaces from (if any).",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Get a text String with any leading and trailing spaces.",
        "args": {
          "TextString": "A String to trim leading and trailing spaces from (if any)."
        },
        "returns": "A String with any leading and trailing spaces removed."
      },
      "id": "Trim"
    },
    "Upper": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to convert to upper case.",
          "id": "TextString"
        }
      ],
      "info": {
        "desc": "Convert a text String to all upper case.",
        "args": {
          "TextString": "A String to convert to upper case."
        },
        "returns": "A String converted to all upper case."
      },
      "id": "Upper"
    },
    "WildCard": {
      "returns": [
        "BOOLEAN"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to text against a wildcard match.",
          "id": "SearchString"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A Wildcard String to match against.",
          "id": "WildcardString"
        }
      ],
      "info": {
        "desc": "Test if text String matches a wildcard string.",
        "args": {
          "SearchString": "A String to text against a wildcard match.",
          "WildcardString": "A Wildcard String to match against."
        },
        "returns": "A Boolean flag if wildcard string was found."
      },
      "id": "WildCard"
    },
    "Debug": {
      "returns": [
        "VOID"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "",
          "id": "MessageTest"
        }
      ],
      "info": {
        "desc": "Display an Alert message box with a single OK button used to dismiss the message.",
        "args": {
          "MessageText": "A String Label to display in the dialog title bar."
        },
        "returns": "Nothing",
        "remarks": "This can be called with 'DEBUG()' and without 'DEBUG' parenthesis."
      },
      "id": "Debug"
    },
    "Exec": {
      "returns": [
        "VOID"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "String represnting full path and name of EXE, Document or Link.",
          "id": "FullFilePath"
        },
        {
          "types": [
            "EXECFLAG"
          ],
          "optional": false,
          "notes": "Number (ENUM) to configure how to display the external application.",
          "id": "ShowFlags"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "String paramaters to pass to the external application.",
          "id": "AppParams"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "String full path to the working directory for the external application.",
          "id": "AppWorkingDir"
        }
      ],
      "info": {
        "desc": "Execute an external Application, Document or Link.",
        "args": {
          "FullFilePath": "String represnting full path and name of EXE, Document or Link.",
          "ShowFlags": "Number (ENUM) to configure how to display the external application.",
          "AppParams": "String paramaters to pass to the external application.",
          "AppWorkingDir": "String full path to the working directory for the external application."
        }
      },
      "id": "Exec"
    },
    "InputBox": {
      "returns": [
        "STRING"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String Label to display in the dialog title bar.",
          "id": "TitleText"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String message instructing the user what to enter.",
          "id": "PromptText"
        },
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String to use as default Text in the Editbox.",
          "id": "DefaultText"
        }
      ],
      "info": {
        "desc": "Display a Dialog with an Editbox for the user to enter data.",
        "args": {
          "TitleText": "A String Label to display in the dialog title bar.",
          "PromptText": "A String message instructing the user what to enter.",
          "DefaultText": "A String to use as default Text in the Editbox."
        },
        "returns": "Text String as entered by the user.",
        "remarks": "Message box provides an 'OK' and 'CANCEL' button for the user to accept or dismiss the dialog and\r\nuser entered data. Clicking 'CANCEL' will return an empty string."
      },
      "id": "InputBox"
    },
    "Query": {
      "returns": [
        "BOOLEAN"
      ],
      "args": [
        {
          "types": [
            "STRING"
          ],
          "optional": false,
          "notes": "A String message instructing the user what to enter.",
          "id": "PromptText"
        }
      ],
      "info": {
        "desc": "Display a simple dialog for the user to select 'YES' or 'NO'.",
        "args": {
          "PromptText": "A String message instructing the user what to enter."
        },
        "returns": "Text String as entered by the user."
      },
      "id": "Query"
    },
    "Error": {
      "returns": [
        "VOID"
      ],
      "args": [
        {
          "types": [
            "ANY"
          ],
          "optional": false,
          "notes": "Accepts just about any 1 item.",
          "id": "Input"
        }
      ],
      "info": {
        "desc": "Dispalys to the User, a custom error message as desired by your code.",
        "args": {
          "Input": "Accepts just about any 1 item."
        },
        "returns": "Nothing"
      },
      "id": "Error"
    },
    "Output": {
      "returns": [
        "VOID"
      ],
      "args": [
        {
          "types": [
            "ANY"
          ],
          "optional": false,
          "notes": "Text to output to the console window.",
          "id": "TextMessage"
        }
      ],
      "info": {
        "desc": "Outputs a message to the Console window.",
        "args": {
          "TextMessage": "Text to output to the console window."
        },
        "remarks": "Applies to the Console Window of ESTmep and CAMduct. Does nothing\r\nin CADmep.\r\nThis function displays a text string only. It can not be used to automate\r\nor issue commands to or automate from the Console Window."
      },
      "id": "Output"
    }
  },
  "CONSTANTS": {
    "MAPPATH_BACKUP": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'BACKUP' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_BACKUP"
    },
    "MAPPATH_BLOCKS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'BLOCKS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_BLOCKS"
    },
    "MAPPATH_CNC": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'CNC' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_CNC"
    },
    "MAPPATH_DATABASE": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'DATABASE' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_DATABASE"
    },
    "MAPPATH_DXF": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'DXF' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_DXF"
    },
    "MAPPATH_FILTER": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'FILTER' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_FILTER"
    },
    "MAPPATH_HOME": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The current working directory of the Fabrication Database",
        "readonly": true
      },
      "id": "MAPPATH_HOME"
    },
    "MAPPATH_IMAGES": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'IMAGES' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_IMAGES"
    },
    "MAPPATH_INSTALL": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'INSTALL' directory of the Fabrication Database where MAP.INI is located",
        "readonly": true
      },
      "id": "MAPPATH_INSTALL"
    },
    "MAPPATH_ITEMS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'ITEMS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_ITEMS"
    },
    "MAPPATH_PARTS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'PARTS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_PARTS"
    },
    "MAPPATH_PROJECT": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'PROJECT' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_PROJECT"
    },
    "MAPPATH_REMNANTS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'REMNANTS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_REMNANTS"
    },
    "MAPPATH_REPORTS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'REPORTS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_REPORTS"
    },
    "MAPPATH_SCRIPTS": {
      "returns": [
        "STRING"
      ],
      "info": {
        "desc": "The 'SCRIPTS' directory of the Fabrication Database as configured in MAP.INI",
        "readonly": true
      },
      "id": "MAPPATH_SCRIPTS"
    },
    "PI": {
      "returns": [
        "NUMBER"
      ],
      "info": {
        "desc": "The value of the mathamatical constant PI",
        "readonly": true
      },
      "id": "PI"
    },
    "EO_NEVER": {
      "returns": [
        "NUMBER"
      ],
      "info": {
        "desc": "Unknown Constant / Purpose Unknown",
        "readonly": true
      },
      "id": "EO_NEVER"
    }
  },
  "ENUMS": {
    "DBLOCKCAN": {
      "values": [
        "LOCK_USER",
        "LOCK_OWNER"
      ],
      "id": "DBLOCKCAN"
    },
    "EXECFLAG": {
      "values": [
        "EXEC_DEFAULT",
        "EXEC_WAIT",
        "EXEC_SHOW_NORMAL",
        "EXEC_SHOW_MAX",
        "EXEC_SHOW_MIN"
      ],
      "id": "EXECFLAG"
    },
    "FILEMODE": {
      "values": [
        "FORINPUT",
        "FOROUTPUT",
        "ISTEXT",
        "UNICODETEXT",
        "UTF8",
        "UTF16"
      ],
      "id": "FILEMODE"
    },
    "FILEPOS": {
      "values": [
        "FILE_END",
        "FILE_START"
      ],
      "id": "FILEPOS"
    },
    "TIMEUNITS": {
      "values": [
        "TIME_SECS",
        "TIME_MINS",
        "TIME_HOURS"
      ],
      "id": "TIMEUNITS"
    }
  },
  "INTERFACES": {
    "AIRTURN": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Airturn Group for the AIRTURN Object.",
            "readonly": true,
            "remarks": "Airturn Group property available only in 2022 and later versions of Autodesk Fabrication."
          },
          "id": "Group"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the AIRTURN Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Name of the AIRTURN Object.",
            "remarks": "Only Airturn Name is given. Airturn Group is not given as part of the value.\r\nAirturn can be set using either an Index or Name."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/AIRTURN-SubObject.md",
      "id": "AIRTURN"
    },
    "CONNECTOR": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alternate Code of the CONNECTOR Object.",
            "remarks": "Alternate Code is used for enforcing Alternate Connector values using the Specifications."
          },
          "id": "Alt"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Connector Group for the CONNECTOR Object.",
            "readonly": true
          },
          "id": "Group"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the CONNECTOR Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Connector Material of the CONNECTOR Object.",
            "remarks": "Property only exists on Pattern Numbers 522, 1522 and 2522 (coupling patterns) to allow for\r\ntransitions to alternate material types. When set to \"None\", scripts return the value of \"Error\" however\r\nthe value can be set to \"None\" using Item.Connector[index].Material = \"None\".\r\nIf duct coupling pattern 522 is Doublewall, an Error will also result for the Skin Connector Material.\r\nSkin Connector Material property can not be set via UI but can be reset via code using\r\nItem.SkinConnector[index].Material = \"None\"."
          },
          "id": "Material"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Connector Library Type of the CONNECTOR Object.",
            "readonly": true
          },
          "id": "Type"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Name of the Connector.",
            "remarks": "Group is given by the Group property."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/CONNECTOR-SubObject.md",
      "id": "CONNECTOR"
    },
    "CUSTOMDEF": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING",
            "NUMBER",
            "NULL"
          ],
          "info": {
            "desc": "Get/Set the value of the Custom Data field, which could be Nothing"
          },
          "id": "Value"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the index number as defined in the Fabrication Database",
            "readonly": true
          },
          "id": "Id"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/CUSTOMDEF-SubObject.md",
      "id": "CUSTOMDEF"
    },
    "DAMPER": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the DAMPER Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Rotation Adjuect of the DAMPER Object.",
            "remarks": "Property is only available in Autodesk Fabrication 2017 and later. It acts upon a damper as an 'Adjust' not an\r\n'Override'. It was added to support Dynamic Damper Rotation from within in Revit. The value of  the rotation\r\noverride will be added to the damper 'Angle' on the Damper database object.\r\ne.g. If a Damper database definition has an angle of 90 degrees, and the Damper Rotation property is 90 degrees,\r\nthe Damper will be rotated 180 degrees on the ITM."
          },
          "id": "Rotation"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the name of the DAMPER Object."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/DAMPER-SubObject.md",
      "id": "DAMPER"
    },
    "DBLOCKHISTORY": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Date/Time Stamp of the Version Record of the DBLOCKHISTORY Object.",
            "readonly": true
          },
          "id": "Changed"
        },
        {
          "returns": [
            "DBLOCKHISTORY"
          ],
          "info": {
            "desc": "Get the History Object of the DBLOCKHISTORY Object.",
            "remarks": "History object is recursive. Each History Object contains another History object. This continues until the\r\nHistroy object returns a NULL value. Do NOT interate through the nested History objects using the Version\r\nproperty as that property can be rolled back/forward and many not indicate the number of history entries accurately."
          },
          "id": "History"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Information Data of the Version Record of the DBLOCKHISTORY Object.",
            "readonly": true
          },
          "id": "Info"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Previous Owner of DBLOCKHISTORY Object.",
            "readonly": true
          },
          "id": "Owner"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Previous Version of the DBLOCKHISTORY Object.",
            "readonly": true
          },
          "id": "Version"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/DBLOCKHISTORY-SubObject.md",
      "id": "DBLOCKHISTORY"
    },
    "DBLOCKINFO": {
      "methods": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "DBLOCKCAN"
              ],
              "optional": false,
              "notes": "Enum/Number for access type to check.",
              "id": "LockType"
            }
          ],
          "info": {
            "desc": "Indicates if the Item's current Owner allows access to History/Versioning.",
            "args": {
              "LockType": "Enum/Number for access type to check."
            }
          },
          "id": "Can"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String representing the new owner.",
              "id": "NewOwner"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String description of the reason for the change.",
              "id": "Reason"
            }
          ],
          "info": {
            "desc": "Changes the current owner.",
            "args": {
              "NewOwner": "String representing the new owner.",
              "Reason": "String description of the reason for the change."
            },
            "returns": "Boolean Flag is successful or not.",
            "remarks": "Only returns TRUE if allowed to change and change is different than current owner."
          },
          "id": "SetOwner"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number representing the new version.",
              "id": "NewVersion"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String description of the reason for the change.",
              "id": "Reason"
            }
          ],
          "info": {
            "desc": "Changes the current version.",
            "args": {
              "NewVersion": "Number representing the new version.",
              "Reason": "String description of the reason for the change."
            },
            "remarks": "Only returns TRUE if allowed to change an change is different than current version."
          },
          "id": "SetVersion"
        }
      ],
      "properties": [
        {
          "returns": [
            "DBLOCKHISTORY"
          ],
          "info": {
            "desc": "Get the History Object of the ITEM Object.",
            "remarks": "History object is recursive. Each History Object contains another History object. This continues until the\r\nHistroy object returns a NULL value. Do NOT interate through the nested History objects using the Version\r\nproperty as that property can be rolled back/forward and many not indicate the number of history entries accurately."
          },
          "id": "History"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Previous Owner of the DBLOCKINFO Object.",
            "readonly": true
          },
          "id": "Owner"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Previous Version of the DBLOCKINFO Object",
            "readonly": true
          },
          "id": "Version"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/DBLOCKINFO-SubObject.md",
      "id": "DBLOCKINFO"
    },
    "DECOILERINFO": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Beading Flag of the DECOILERINFO Object.",
            "readonly": true
          },
          "id": "Beading"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the cofigured Decoiler Width of the DECOILERINFO Object.",
            "readonly": true
          },
          "id": "CoilWidth"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the remainder of straight length of the DECOILERINFO Object.",
            "readonly": true
          },
          "id": "SmallLength"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the standard straight length that the entered length is broken into of the DECOILERINFO Object.",
            "readonly": true,
            "remarks": "Standard Length may be smaller than the Coil Width depending on connector adjusts, etc."
          },
          "id": "StdLength"
        },
        {
          "returns": [
            "\tNUMBER"
          ],
          "info": {
            "desc": "Get the quantity of standard lengths that the entered length is broken into for the DECOILER Object.",
            "readonly": true
          },
          "id": "StqQty"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/DECOILERINFO-SubObject.md",
      "id": "DECOILERINFO"
    },
    "DIM": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Annotation of the DIM Object.",
            "readonly": true,
            "remarks": "Annotations of the Dimension are the A, B, C, etc. text strings related to the dimension."
          },
          "id": "Annotation"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the DIM Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Dimension Name of the DIM Object.",
            "readonly": true
          },
          "id": "Name"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Calculated Numerical Value of the DIM Object.",
            "readonly": true,
            "remarks": "Some Dimension values have settings like \"Auto\", \"Dependent\", \"Calculated\". This property retuns\r\nthe calculated value of the dimension with those settings."
          },
          "id": "NumValue"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Status of the Dimension of the DIM Object.",
            "readonly": true,
            "remarks": "Status values are \"Input\", \"Display\", \"Not Used\" or \"Fixed\"."
          },
          "id": "Status"
        },
        {
          "returns": [
            "STRING",
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Value of the DIM Object."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/DIM-SubObject.md",
      "id": "DIM"
    },
    "INSULATION": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Facing Name of the INSULATION Object.",
            "remarks": "Facing Name only is given. Facing Group is not given as part of the value."
          },
          "id": "Facing"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Facing property of the INSULATION Object."
          },
          "id": "FacingLock"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Insulation Gauge of the INSULATION Object.",
            "remarks": "For Insulation Material Types 'Linear Ductwork' and 'For Machines', Gauge gives the Insulation Thickness.\r\nFor Insulation Material Types 'Pipework', 'Electrical Containment' and 'Undefined' Gauge gives the Insualtion Material\r\nIndex Number as entered in the Insulation Material (e.g. May be a decimal)."
          },
          "id": "Gauge"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Insulation Material Name of the INSULATION Object.",
            "remarks": "Insulation Material Group is not given as part of the value."
          },
          "id": "Material"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the Material property of the INSUALTION Object."
          },
          "id": "MaterialLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Insualtion Status of the INSULATION Object.",
            "remarks": "\"OFF\", \"INSIDE\" and \"OUTSIDE\" are the only values allowed."
          },
          "id": "Status"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the Status property of the INSULATION Object.",
            "remarks": "Appears to not be functional in many (newer) versions of Autodesk Fabrication."
          },
          "id": "StatusLock"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/INSULATION-SubObject.md",
      "id": "INSULATION"
    },
    "JOB": {
      "methods": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER",
                "STRING"
              ],
              "optional": false,
              "notes": "Number or String of Status to be altered.",
              "id": "NameOrIndex"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": false,
              "notes": "Boolean Flag indicating if Status should be made Active.",
              "id": "Active"
            }
          ],
          "info": {
            "desc": "This alters the Active Flag of a Job Status",
            "args": {
              "NameOrIndex": "Number or String of Status to be altered.",
              "Active": "Boolean Flag indicating if Status should be made Active."
            },
            "returns": "Boolean Flag indicating is status activation was successful.",
            "remarks": "Returns False if there was an error during Status Activation, True otherwise."
          },
          "id": "SetStatus"
        }
      ],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Job Color value of the JOB Object.",
            "remarks": "Value is given as an integer representing AutoCAD's Color index (0 - 255)."
          },
          "id": "Colour"
        },
        {
          "returns": [
            "CUSTOMDEF[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of CUSTOM DATA Objects for the JOB Object.",
            "remarks": "There is no way to itterate over this array, you need to be aware of the custom data indices or names that exist in your database."
          },
          "id": "CustomData"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Job Creation Date value of the JOB Object.",
            "readonly": true
          },
          "id": "Date"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the generic utility field #1 of JOB Object.",
            "remarks": "Field can be used for any user defined purpose."
          },
          "id": "Field1"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the generic utility field #2 of JOB Object.",
            "remarks": "Field can be used for any user defined purpose."
          },
          "id": "Field2"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Number of Items in job of the JOB Object.",
            "readonly": true
          },
          "id": "Items"
        },
        {
          "returns": [
            "ITEM[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of ITEM Objects for the JOB Object.",
            "remarks": "Always check to see if the 'Items' property returns a value >= 1 before using Job.Item[index#]"
          },
          "id": "Item"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Job Name of the JOB Object.",
            "readonly": true
          },
          "id": "Name"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Notes property of the JOB Object."
          },
          "id": "Notes"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Job Path { relative to PROJECT path } of the JOB Object.",
            "readonly": true
          },
          "id": "Project"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Job Ref property of the JOB Object.",
            "readonly": true
          },
          "id": "Reference"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Statuses of the JOB Object.",
            "readonly": true
          },
          "id": "Statuses"
        },
        {
          "returns": [
            "JOBSTATUS[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of JOBSTATUS Objects for the JOB Object."
          },
          "id": "Status"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/JOB-SubObject.md",
      "id": "JOB"
    },
    "JOBSTATUS": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Status Active flag of the JOBSTATUS Object.",
            "readonly": true
          },
          "id": "Active"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Date status was last activated in short-date string format of the JOBSTATUS Object.",
            "readonly": true
          },
          "id": "LastActivated"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Status Name of the JOBSTATUS Object.",
            "readonly": true
          },
          "id": "Name"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/JOBSTATUS-SubObject.md",
      "id": "JOBSTATUS"
    },
    "LINK": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Link Name of the LINK Object."
          },
          "id": "Name"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Parameters of the LINK Object."
          },
          "id": "Param"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the URL Target of the LINK Object."
          },
          "id": "Target"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/LINK-SubObject.md",
      "id": "LINK"
    },
    "OPTION": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the OPTION Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Name of the OPTION Object.",
            "readonly": true
          },
          "id": "Name"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Status of the OPTION Object.",
            "readonly": true,
            "remarks": "Valid values are 'Hidden' and 'Input'."
          },
          "id": "Status"
        },
        {
          "returns": [
            "NUMBER",
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Value of the OPTION Object."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/OPTION-SubObject.md",
      "id": "OPTION"
    },
    "PRODUCTENTRY": {
      "methods": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'ALIAS' Column to Product List.",
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddAlias"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'AREA' Column to Product List.",
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddArea"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'BOUGHTOUT' Column to Product List.",
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddBoughtOut"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'CADBLOCK' Column to Product List.",
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddCADBlock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "Text Name of Custom Data field to add.",
              "id": "CustomDataName"
            }
          ],
          "info": {
            "desc": "Adds the 'CUSTOMDATA[<dataname>]' Column to Product List.",
            "args": {
              "CustomDataName": "Text Name of Custom Data field to add."
            },
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddCustomData"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'ID' Column to Product List.",
            "returns": "Boolean flag indicating if adding column was successful or not."
          },
          "id": "AddDatabaseID"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": true,
              "notes": "Optional Upper Case Name of Dimension to add.",
              "id": "DimName"
            }
          ],
          "info": {
            "desc": "Adds the 'DIM' Column(s) to Product List.",
            "args": {
              "DimName": "Optional Upper Case Name of Dimension to add."
            },
            "returns": "Boolean flag indicating if adding column was successful or not.",
            "remarks": "Function is very buggy. Repeated calls with improper syntax will cause\r\npredictability of this function to be sporatic at best. Repeated calls without\r\nspecifying the dimension name to add sequentially adds the next dimension\r\nas they are listed in the pattern."
          },
          "id": "AddDim"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'FLOWMIN' and 'FLOWMAX' Columns to Product List.",
            "returns": "Boolean flag indicating if adding columns was successful or not."
          },
          "id": "AddFlow"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": true,
              "notes": "",
              "id": "OptionNmae"
            }
          ],
          "info": {
            "desc": "Adds the 'OPTION' Column(s) to Product List.",
            "args": {
              "OptionName": "Optional Upper Case Name of Option to add."
            },
            "returns": "Boolean flag indicating if adding column was successful or not.",
            "remarks": "Function is very buggy. Repeated calls with improper syntax will cause\r\npredictability of this function to be sporatic at best. Repeated calls without\r\nspecifying the dimension name to add sequentially adds the next dimension\r\nas they are listed in the pattern."
          },
          "id": "AddOption"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'ORDER' Column to Product List.",
            "returns": "Boolean flag indicating if adding columns was successful or not."
          },
          "id": "AddOrder"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Adds the 'WEIGHT' Column to Product List.",
            "returns": "Boolean flag indicating if adding columns was successful or not."
          },
          "id": "AddWeight"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'ALIAS' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveAlias"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'AREA' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveArea"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'BOUGHTOUT' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveBoughtOut"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'CADBLOCK' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveCADBlock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "",
              "id": "Name"
            }
          ],
          "info": {
            "desc": "Removes the 'CUSTOMDATA[<dataname>]' Column from the Product List.",
            "args": {
              "CustomDataName": "Text Name of Custom Data field to remove."
            },
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveCustomData"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'ID' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveDatabaseID"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Zero based index of Dimension column to remove.",
              "id": "DimIndex"
            }
          ],
          "info": {
            "desc": "Removes the 'DIM' Column(s) from the Product List.",
            "args": {
              "DimIndex": "Zero based index of Dimension column to remove."
            },
            "returns": "Boolean flag indicating if removing column was successful or not.",
            "remarks": "Function is very buggy. Repeated calls with improper syntax will cause\r\npredictability of this function to be sporatic at best. Calls without\r\nspecifying the Dimension index appear to do nothing."
          },
          "id": "RemoveDim"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'FLOWMIN' and 'FLOWMAX' Columns from the Product List.",
            "returns": "Boolean flag indicating if removing columns was successful or not."
          },
          "id": "RemoveFlow"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Zero based index of Option column to remove.",
              "id": "OptionIndex"
            }
          ],
          "info": {
            "desc": "Removes the 'OPTION' Column(s) from the Product List.",
            "args": {
              "OptionIndex": "Zero based index of Option column to remove."
            },
            "returns": "Boolean flag indicating if removing column was successful or not.",
            "remarks": "Function is very buggy. Repeated calls with improper syntax will cause\r\npredictability of this function to be sporatic at best. Calls without\r\nspecifying the Option index appear to do nothing."
          },
          "id": "RemoveOption"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Removes the 'ORDER' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveOrder"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "REmoves the 'WEIGHT' Column from the Product List.",
            "returns": "Boolean flag indicating if removing column was successful or not."
          },
          "id": "RemoveWeight"
        }
      ],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alias property of the PRODUCTENTRY Object."
          },
          "id": "Alias"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Area property of the PRODUCTENTRY Object."
          },
          "id": "Area"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the BoughtOut flag of the PRODUCTENTRY Object."
          },
          "id": "BoughtOut"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CAD Block name of the PRODUCTENTRY Object."
          },
          "id": "CadBlock"
        },
        {
          "returns": [
            "CUSTOMDEF[]"
          ],
          "info": {
            "desc": "This gets an array of CUSTOMDEF Objects of the PRODUCTENTRY Object."
          },
          "id": "CustomData"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Database ID property of the PRODUCTENTRY Object."
          },
          "id": "DatabaseID"
        },
        {
          "returns": [
            "NUMBER[]",
            "STRING[]"
          ],
          "info": {
            "desc": "This Gets an array of DIM Objects of the PRODUCTENTRY Object.",
            "remarks": "Available properties of the DIM Object are limited within the PRODUCTENTRY Object."
          },
          "id": "Dim"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Maximum Flow value of the PRODUCTENTRY Object."
          },
          "id": "FlowMax"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Minimum Flow value of the PRODUCTENTRY Object."
          },
          "id": "FlowMin"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Model Name property of the PRODUCTENTRY Object."
          },
          "id": "Model"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Product Entry name of the PRODUCTENTRY Object."
          },
          "id": "Name"
        },
        {
          "returns": [
            "NUMBER[]",
            "STRING[]"
          ],
          "info": {
            "desc": "This Gets an array of OPTION Objects of the PRODUCTENTRY Object.",
            "remarks": "Available properties of the OPTION Object are limited within the PRODUCTENTRY Object."
          },
          "id": "Option"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Order property of the PRODUCTENTRY Object."
          },
          "id": "Order"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the SKey property of the PRODUCTENTRY Object.",
            "remarks": "Available in Fabrication 2018.2 versions and later."
          },
          "id": "SKey"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Weight value of the PRODUCTENTRY Object."
          },
          "id": "Weight"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/PRODUCTENTRY-SubObject.md",
      "id": "PRODUCTENTRY"
    },
    "PRODUCTINFO": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Gets the Number of Product List Entries of the PRODUCTINFO Object.",
            "readonly": true
          },
          "id": "Entries"
        },
        {
          "returns": [
            "PRODUCTENTRY[]"
          ],
          "info": {
            "desc": "This gets an array of PRODUCTENTRY Objects of the PRODUCTINFO Object."
          },
          "id": "Entry"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasAlias flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains an Alias column as part of its data."
          },
          "id": "HasAlias"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasArea Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains an Area column as part of its data."
          },
          "id": "HasArea"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasBoughtOut Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains a BoughtOut column as part of its data."
          },
          "id": "HasBoughtOut"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasCadBlock Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains a CAD Block column as part of its data."
          },
          "id": "HasCADBlock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasCustomData Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains any Custom Data columns as part of its data."
          },
          "id": "HasCustomData"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Gets the number of Custom Data columns of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Number indicates the number of custom data columns in the Product List."
          },
          "id": "HasCustomDatas"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasDatabaseID Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains a Database ID column as part of its data."
          },
          "id": "HasDatabaseID"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Gets the number of DIM columns of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Number indicates the number of Dimension columns in the Product List."
          },
          "id": "HasDims"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasFlow Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains the Min & Max Flow columns as part of its data."
          },
          "id": "HasFlow"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Gets the number of OPTION columns of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Number indicates the number of Option columns in the Product List."
          },
          "id": "HasOptions"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasOrder Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains the Order column as part of its data."
          },
          "id": "HasOrder"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasSKey Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains the SKey column as part of its data.\r\nAvailable in Fabrication 2018.2 versions and later."
          },
          "id": "HasSKey"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Gets the HasWeight Flag of the PRODUCTINFO Object.",
            "readonly": true,
            "remarks": "Flag indicates if the Product List contains the Weight column as part of its data."
          },
          "id": "HasWeight"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Gets the Revision property of the PRODUCTINFO Object.",
            "readonly": true
          },
          "id": "Revision"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/PRODUCTINFO-SubObject.md",
      "id": "PRODUCTINFO"
    },
    "SEALENT": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Sealent Value of the SEALENT Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Sealent Name of the SEALENT Object."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/SEALENT-SubObject.md",
      "id": "SEALENT"
    },
    "SEAM": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alternatge Code of the SEAM Object.",
            "remarks": "Alternate Code is used for enforcing Alternate Seam values using the Specifications."
          },
          "id": "Alt"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Seam Group for the SEAM Object.",
            "readonly": true,
            "remarks": "Seam Group propoerty is available only in 2022 and later versions of Autodesk Fabrication."
          },
          "id": "Group"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Seam Name property of the SEAM Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Seam Name value of the SEAM Object.",
            "remarks": "Only Seam Name is given. Seam Group is not given as part of the value.\r\nSeam can be set using either an Index or Name."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/SEAM-SubObject.md",
      "id": "SEAM"
    },
    "SPLITTER": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Splitter Group for the SPLITTER Object.",
            "readonly": true,
            "remarks": "Splitter Group propoerty is available only in 2022 and later versions of Autodesk Fabrication."
          },
          "id": "Group"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Splitter Name of the ITEM Object.",
            "remarks": "Only Splitter Name is given. Splitter Group is not given as part of the value.\r\nSplitter can be set using the 'Name' or 'Index'."
          },
          "id": "Value"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Splitter property of the SPLITTER Object."
          },
          "id": "Locked"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/SPLITTER-SubObject.md",
      "id": "SPLITTER"
    },
    "STATUS": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Date and Time Stamp of the STATUS Object.",
            "readonly": true,
            "remarks": "Date and Time Stamp reflect the Date and Time when the Status changed.\r\nA value of 'Default' is the first (unchanged) Status."
          },
          "id": "DateTime"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Status ID of the STATUS Object.",
            "readonly": true
          },
          "id": "Id"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the User ID of the user who changed the Status of the STATUS Object.",
            "readonly": true,
            "remarks": "Does not appear to change or work. Does not appear to be Read/Write as Autodesk's documentation suggests."
          },
          "id": "UserId"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Status Description of the STATUS Object.",
            "readonly": true
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/STATUS-SubObject.md",
      "id": "STATUS"
    },
    "STIFFENER": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Stiffener Group for the STIFFENER Object.",
            "readonly": true,
            "remarks": "Stiffener Group propoerty is available only in 2022 and later versions of Autodesk Fabrication."
          },
          "id": "Group"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Stiffener property of the STIFFENER Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Number of Stiffeners required (excluding End Stiffeners) of the STIFFENER Object."
          },
          "id": "Qty"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Spacing between Stiffeners of the STIFFENER Object.",
            "readonly": true
          },
          "id": "Spacing"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Splitter Name value of the SPLITTER Object.",
            "remarks": "Stiffener Name only is given. Stiffener Group is not given as part of the value.\r\nStiffener can be set using the 'Name' only."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/STIFFENER-SubObject.md",
      "id": "STIFFENER"
    },
    "SUPPORT": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag of the Support property of the SUPPORT Object."
          },
          "id": "Locked"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Quantity of Supports required of the SUPPORT Object."
          },
          "id": "Qty"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Spacing between Supports of the SUPPORT Object.",
            "remarks": "If set, this will change the value of the 'Qty'."
          },
          "id": "Spacing"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Support Name of the SUPPORT Object.",
            "remarks": "Support Name only is given. Support Group is not given as part of the value.\r\nSupport can be set using the 'Name' or Index."
          },
          "id": "Value"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/SUPPORT-SubObject.md",
      "id": "SUPPORT"
    },
    "TASKSELECTION": {
      "methods": [],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set a Count (Number of Items) in the Selection for the TASKSELECTION Object."
          },
          "id": "Count"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/TASKSELECTION-SubObject.md",
      "id": "TASKSELECTION"
    }
  },
  "OBJECTS": {
    "ARRAY": {
      "constructor": {
        "returns": [
          ""
        ],
        "args": [
          {
            "types": [
              "NUMBER"
            ],
            "optional": true,
            "notes": "Optional Number of items to initialize the Array Object to hold.",
            "id": "NumberOfItems"
          }
        ],
        "info": {
          "desc": "Constructs an Array Object.",
          "args": {
            "NumberOfItems": "Optional Number of items to initialize the Array Object to hold."
          },
          "returns": "Nothing.",
          "remarks": "Constructs an Array object with the number of inital elements as specified. Each element's\r\nvalue will be NULL/False.\r\nIf optional NumberOfItems is not specifcied, a default value of 0 (zero) is used."
        },
        "id": "constructor"
      },
      "methods": [
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "ANY[]"
              ],
              "optional": false,
              "notes": "",
              "id": "ArrayData"
            }
          ],
          "info": {
            "desc": "Adds/appends the specified data items to an array.",
            "args": {
              "ArrayData": ""
            },
            "returns": "Number of elements added to the array."
          },
          "id": "Add"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": true,
              "notes": "Optional Number specifying the index number of the element to remove from the array.",
              "id": "ArrayIndex"
            }
          ],
          "info": {
            "desc": "Removes the specified item from an array.",
            "args": {
              "ArrayIndex": "Optional Number specifying the index number of the element to remove from the array."
            },
            "returns": "Boolean Flag indicating if element removal was successful.",
            "remarks": "Index is a '1-based' meaning the first item in the Array is index # 1.\r\nDefault when ArrayIndex is missing is the last item in the Array.\r\nArray is dynamically resized, removing an item from the beginning or middle of the array\r\nresults in the array being smaller and the other elements moving up in position."
          },
          "id": "Delete"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "ANY"
              ],
              "optional": false,
              "notes": "Any type of data to insert into an array.",
              "id": "ArrayData"
            },
            {
              "types": [
                "NUMBER"
              ],
              "optional": true,
              "notes": "Optional Index position to insert data into.",
              "id": "ArrayIndex"
            }
          ],
          "info": {
            "desc": "Inserts a piece of data into an Array at the specified index.",
            "args": {
              "ArrayData": "Any type of data to insert into an array.",
              "ArrayIndex": "Optional Index position to insert data into."
            },
            "remarks": "When inserting data into an Array at a sepecific index, the previous data and all other\r\ndownstream data are shifed down in the index chain.\r\nDefault when ArrayIndex is missing is to insert at the end of the array."
          },
          "id": "Insert"
        }
      ],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Number of elements in the array of the ARRAY Object.",
            "remarks": "If changed, new elements are set to NULL/False."
          },
          "id": "Count"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/ARRAY-Object.md",
      "id": "ARRAY"
    },
    "FILE": {
      "constructor": {
        "returns": [
          ""
        ],
        "args": [
          {
            "types": [
              "STRING"
            ],
            "optional": true,
            "notes": "Optional String Name of the file to open.",
            "id": "FileName"
          },
          {
            "types": [
              "FILEMODE"
            ],
            "optional": true,
            "notes": "Optional Mode(s) for the file open.",
            "id": "AccessMode"
          }
        ],
        "info": {
          "desc": "Constructs a File Object.",
          "args": {
            "FileName": "Optional String Name of the file to open.",
            "AccessMode": "Optional Mode(s) for the file open."
          },
          "returns": "Nothing",
          "remarks": "If optional parameters are not specified when constructing the FILE Object,\r\nuse the FILE.Open method to specify them."
        },
        "id": "constructor"
      },
      "methods": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Closes an open File.",
            "returns": "Boolean Flag indicating if file closure was successful or not.",
            "remarks": "Any open file needs to be closed before any other application can access it in Read/Write mode."
          },
          "id": "Close"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": true,
              "notes": "Optional Boolean Flag to add deleted file to the Windows Recycle Bin",
              "id": "UseRecycleBin"
            }
          ],
          "info": {
            "desc": "Deletes a file.",
            "args": {
              "UseRecycleBin": "Optional Boolean Flag to add deleted file to the Windows Recycle Bin"
            },
            "returns": "Boolead Flag indicating of file deletion was successful or not."
          },
          "id": "Delete"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String Name of file to open.",
              "id": "Filename"
            },
            {
              "types": [
                "FILEMODE"
              ],
              "optional": false,
              "notes": "Mode(s) for file open.",
              "id": "AccessMode"
            }
          ],
          "info": {
            "desc": "Opens a file for access based on file mode.",
            "args": {
              "FileName": "String Name of file to open.",
              "AccessMode": "Mode(s) for file open."
            },
            "returns": "Boolean Flag indicating if file was successfully opened for the specified access mode/type.",
            "remarks": "This function is not needed if the FILE Object Constructor was called with parameters specifying the\r\nfile name and access mode/type."
          },
          "id": "Open"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [],
          "info": {
            "desc": "Read an 8-but Byte (0-255) from a binary file.",
            "returns": "Number read from the open file.",
            "remarks": "File must be opened as non-text."
          },
          "id": "ReadByte"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [],
          "info": {
            "desc": "Reads a character from a binary file.",
            "remarks": "File must be opened as non-text.\r\nWill read a BYTE for ANSI files and a WORD for Unicode Files."
          },
          "id": "ReadChar"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [],
          "info": {
            "desc": "Read a 32-bit signed integer from a binary file.",
            "returns": "Number read fronm file.",
            "remarks": "File must be opened as non-text."
          },
          "id": "ReadInt"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [],
          "info": {
            "desc": "Read a line of text (minsus CR/LF) from a text file.",
            "returns": "String read from file.",
            "remarks": "File must be opened as text (Unicode or ANSI).\r\nEach call reads up into the next CR (Carriage Return), LF (Line Feed) or EOF (End of File) marker.\r\nReturned String does not contain CR/LR or EOF characters."
          },
          "id": "ReadLine"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [],
          "info": {
            "desc": "Read a C-Style double precision floating point number from a binary file.",
            "returns": "Number read from file.",
            "remarks": "File must be opened as non-text."
          },
          "id": "ReadReal"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [],
          "info": {
            "desc": "Read a String from a binary file.",
            "returns": "String read from file.",
            "remarks": "File must be opened as non-text.\r\nWill read BTYEs for ANSI files and WORDs for Unicode files."
          },
          "id": "ReadString"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [],
          "info": {
            "desc": "Read a 16-bit WORD (0-65535) from a binary file.",
            "returns": "Number read from file.",
            "remarks": "File must be opened as non-text."
          },
          "id": "ReadWord"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String representing the name of the file to rename to.",
              "id": "FileName"
            }
          ],
          "info": {
            "desc": "Renames the current file held by the FILE object.",
            "args": {
              "FileName": "String representing the name of the file to rename to."
            },
            "returns": "Boolean Flag indicating is file rename was successful or not.",
            "remarks": "Current File Name must be assigned but file must not be opened for access."
          },
          "id": "Rename"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [
            {
              "types": [
                "ANY"
              ],
              "optional": false,
              "notes": "Data to position the file reader to.",
              "id": "DataToGoTo"
            }
          ],
          "info": {
            "desc": "Positions the file reader to the position after the specified data in the file.",
            "args": {
              "DataToGoTo": "Data to position the file reader to."
            },
            "returns": "Nothing.",
            "remarks": "File reader positions to just after the data that's specified by the function.\r\nSubsequent calls to functions that read data will return the data immediantely after\r\nthe data that was specified."
          },
          "id": "SeekEntry"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [
            {
              "types": [
                "ANY"
              ],
              "optional": false,
              "notes": "",
              "id": "DataToFind"
            }
          ],
          "info": {
            "desc": "Returns Boolean flag if specified data was found in the file.",
            "args": {
              "DataToFind": ""
            },
            "returns": "Boolean Flag indicating if data was found or not."
          },
          "id": "SeekLine"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "BYTE to write to file.",
              "id": "ByteToWrite"
            }
          ],
          "info": {
            "desc": "Write an 8-bit BYTE (0-255) to a binary file.",
            "args": {
              "ByteToWrite": "BYTE to write to file."
            },
            "returns": "Boolean Flag indicating if write was successful or not.",
            "remarks": "File must be opened as non-text."
          },
          "id": "WriteByte"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String character to write to file.",
              "id": "CharacterToWrite"
            }
          ],
          "info": {
            "desc": "Wtite a Character to a binary file.",
            "args": {
              "CharacterToWrite": "String character to write to file."
            },
            "remarks": "File must be opened as non-text.\r\nWill write a BYTE for ANSI files or WORK for Unicodes files."
          },
          "id": "WriteChar"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number to write to file.",
              "id": "IntegerToWrite"
            }
          ],
          "info": {
            "desc": "Write a 32-bit signed integer to a binary file.",
            "args": {
              "IntegerToWrite": "Number to write to file."
            },
            "returns": "Boolean Flag indicating if write was successful or not.",
            "remarks": "File must be opened as non-text."
          },
          "id": "WriteInt"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String to write to file.",
              "id": "StringToWrite"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": true,
              "notes": "Optional Boolean Flag to automatically append a CR+LF to and of line.",
              "id": "AppendCR"
            }
          ],
          "info": {
            "desc": "Write a line of text to a text file.",
            "args": {
              "StringToWrite": "String to write to file.",
              "AppendCR": "Optional Boolean Flag to automatically append a CR+LF to and of line."
            },
            "returns": "Boolead Flag indicating if write was successful or not.",
            "remarks": "If optional AppendCR paramater missing, True is default and will automatically append\r\na Carrage Return (CR) and Line Feed (LR) character to the end of the specified string."
          },
          "id": "WriteLine"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number to write to file.",
              "id": "RealToWrite"
            }
          ],
          "info": {
            "desc": "Write a C-Style double precision floating point number to a binary file.",
            "args": {
              "RealToWrite": "Number to write to file."
            },
            "returns": "Boolean Flag indicating if write was successful or not.",
            "remarks": "File must be opened as non-text."
          },
          "id": "WriteReal"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String to write to file.",
              "id": "StringToWrite"
            }
          ],
          "info": {
            "desc": "Write a string to a text file.",
            "args": {
              "StringToWrite": "String to write to file."
            },
            "returns": "Boolean Flag indicating if write was successful or not.",
            "remarks": "File must be opened as non-text.\r\nWill write BYTEs for ANSI files and WORDs for Unicode files."
          },
          "id": "WriteString"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number to write to file.",
              "id": "WordToWrite"
            }
          ],
          "info": {
            "desc": "Write a 16-bit WORD (0-65535) to a binary file.",
            "args": {
              "WordToWrite": "Number to write to file."
            },
            "returns": "Boolean Flag indicating if write was successful or not.",
            "remarks": "File must be opened as non-text."
          },
          "id": "WriteWord"
        }
      ],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the End of File flag for the FILE Object.",
            "readonly": true
          },
          "id": "EOF"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Flag indicating if the file exist or not for the FILE Object.",
            "readonly": true
          },
          "id": "Exists"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the File Name of file to open for the FILE Object."
          },
          "id": "FileName"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Flag indicating if the file is open for the FILE Object.",
            "readonly": true
          },
          "id": "IsOpen"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Flag indicating if the file is Unicode for the FILE Object.",
            "readonly": true,
            "remarks": "File is ANSI encoded if not Unicode."
          },
          "id": "IsUnicode"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Length of file (in Bytes) for the FILE Object.",
            "readonly": true
          },
          "id": "Length"
        },
        {
          "returns": [
            "FILEMODE"
          ],
          "info": {
            "desc": "Get/Set the File Open Mode (flags) for the FILE Object."
          },
          "id": "Mode"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the current File Position (in Bytes) for the FILE Object."
          },
          "id": "Position"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/FILE-Object.md",
      "id": "FILE"
    },
    "FILELOCATOR": {
      "constructor": {
        "returns": [
          ""
        ],
        "args": [
          {
            "types": [
              "STRING"
            ],
            "optional": true,
            "notes": "Optional String of Root Path to Search.",
            "id": "RootPath"
          },
          {
            "types": [
              "STRING"
            ],
            "optional": true,
            "notes": "Optional String Wildcard to match against.",
            "id": "SearchWildcard"
          },
          {
            "types": [
              "BOOLEAN"
            ],
            "optional": true,
            "notes": "Optional Boolean Flag to search against Files.",
            "id": "SearchFiles"
          },
          {
            "types": [
              "BOOLEAN"
            ],
            "optional": true,
            "notes": "Optional Boolean Flag to search against Folders.",
            "id": "SearchFolders"
          }
        ],
        "info": {
          "desc": "Constructs a FileLocator Object.",
          "args": {
            "RootPath": "Optional String of Root Path to Search.",
            "SearchWildcard": "Optional String Wildcard to match against.",
            "SearchFiles": "Optional Boolean Flag to search against Files.",
            "SearchFolders": "Optional Boolean Flag to search against Folders."
          },
          "returns": "Nothing.",
          "remarks": "If optional parameters are not specified when constructing the FILELOCATOR object,\r\nuse the FILELOCATOR.Scan method to specify them."
        },
        "id": "constructor"
      },
      "methods": [
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "Optional String of Root Path to Search.",
              "id": "RootPath"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "Optional String Wildcard to match against.",
              "id": "SearchWildcard"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": false,
              "notes": "Optional Boolean Flag to search against Files.",
              "id": "SearchFiles"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": false,
              "notes": "Optional Boolean Flag to search against Folders.",
              "id": "SearchFolders"
            }
          ],
          "info": {
            "desc": "Scan a root path for Files and/or Folders matching a Wildcard string.",
            "args": {
              "RootPath": "Optional String of Root Path to Search.",
              "SearchWildcard": "Optional String Wildcard to match against.",
              "SearchFiles": "Optional Boolean Flag to search against Files.",
              "SearchFolders": "Optional Boolean Flag to search against Folders."
            },
            "returns": "Number indicating how many files and/or folders matched the search.",
            "remarks": "This function is not needed if the FILELOCATOR Object Constructor was called with parameters specifying the\r\npath, search wildcard, file and folder search flags."
          },
          "id": "Scan"
        }
      ],
      "properties": [
        {
          "returns": [
            "STRING[]"
          ],
          "info": {
            "desc": "This gets an array of File Names of found files for the FILELOCATOR Object."
          },
          "id": "File"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Number of Files that were found for the FILELOCATOR Object.",
            "readonly": true
          },
          "id": "FileCount"
        },
        {
          "returns": [
            "STRING[]"
          ],
          "info": {
            "desc": "This gets an array of Folder Names of found folders for the FILELOCATOR Object."
          },
          "id": "Folder"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Number of Folders that were found for the FILELOCATOR Object.",
            "readonly": true
          },
          "id": "FolderCount"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the full Path of Folder being scanned for the FILELOCATOR Object."
          },
          "id": "Path"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/FILELOCATOR-Object.md",
      "id": "FILELOCATOR"
    },
    "ITEMSTRUCT": {
      "constructor": {
        "returns": [
          ""
        ],
        "args": [],
        "info": {
          "desc": "Constructs an ItemStruct Object.",
          "returns": "ITEMSTRUCT",
          "remarks": "Represents a dynamically loaded ITM file and acts nearly identical to a native ITEM reference"
        },
        "id": "constructor"
      },
      "methods": [
        {
          "returns": [
            "VOID"
          ],
          "args": [
            {
              "types": [
                "STRING",
                "NUMBER"
              ],
              "optional": false,
              "notes": "",
              "id": "NameOrIndex"
            }
          ],
          "info": {
            "desc": "Dynamically adds Custom Data to the item (for 'User' custom data types)",
            "args": {
              "NameOrIndex": ""
            },
            "returns": "Nothing",
            "remarks": "This function merely added the specified 'User' Custom Data 'Field' to the Item. Once the\r\nfield is added, you can set a value using the Custom Data property Item.CustomData[name/index#].Value"
          },
          "id": "AddCustomData"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of the URL to use for the Link.",
              "id": "Link"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String description of the Link.",
              "id": "Description"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String page on the link to go to. e.g. '#Page=2'.",
              "id": "Page"
            }
          ],
          "info": {
            "desc": "Adds a Hyperlink to the Links tab of the Item Properties.",
            "args": {
              "Link": "String of the URL to use for the Link.",
              "Description": "String description of the Link.",
              "Page": "String page on the link to go to. e.g. '#Page=2'."
            },
            "returns": "Number representing the number of the link added."
          },
          "id": "AddLink"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "",
              "id": "ItmFilePath"
            }
          ],
          "info": {
            "desc": "Gets the file name of the Image used for a ITM.",
            "args": {
              "ItmFilePath": ""
            },
            "returns": "String representing path and name of the image file."
          },
          "id": "BitmapFile"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Indicates if the Item supports DoubleWall entry or not.",
            "returns": "Boolean"
          },
          "id": "CanDoubleWall"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Indicates if the Item supports Rotary Nesting or not.",
            "returns": "Boolean"
          },
          "id": "CanRotary"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number of link to remove from the Item.",
              "id": "LinkNumber"
            }
          ],
          "info": {
            "desc": "Removes a Link from the Links tab of the Item Properties.",
            "args": {
              "LinkNumber": "Number of link to remove from the Item."
            },
            "returns": "Boolean Flag indicating if link deletion was successful or not."
          },
          "id": "DeleteLink"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "This index number is associated with the connector number shown in the edit item dialog.",
              "id": "ConnectorIndex"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": true,
              "notes": "Optional string representing an X, Y or Z portion of the connector centerline coordinate.",
              "id": "XYZ"
            }
          ],
          "info": {
            "desc": "Gets a string representing the location of a connectors X, Y and/or Z value.",
            "args": {
              "ConnectorIndex": "This index number is associated with the connector number shown in the edit item dialog.",
              "XYZ": "Optional string representing an X, Y or Z portion of the connector centerline coordinate."
            },
            "returns": "String representing the X, Y, Z or all 3 if XYZ was not provided.",
            "remarks": "Supported values are...'XYZ', 'X', 'Y', 'Z', 'TOP' and 'BTM'.\r\nThe string 'XYZ', missing parameters, empty strings or any other non supported value returns\r\na string representing the X, Y & Z coordinates seperated by spaces (e.g. '1.25 4.54 0.00').\r\nIf the string 'X', 'Y' or 'Z' is speified, a string representing just that compoentent of the\r\nendpoint is returned.\r\nIf the string 'TOP' or 'BTM' is specified, a string representing the Z coordinate of the connector's\r\nTop or Bottom is returned."
          },
          "id": "EndLocation"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "Allowed values are \"Soffit\" and \"Floor\".",
              "id": "LevelName"
            }
          ],
          "info": {
            "desc": "Get the Level value of the specified Item based on it's section.",
            "args": {
              "LevelName": "Allowed values are \"Soffit\" and \"Floor\"."
            },
            "returns": "Number representing the Soffit/Floor level of the Item's Section."
          },
          "id": "Level"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of full path and file name including '.ITM' extension.",
              "id": "ItemFile"
            }
          ],
          "info": {
            "desc": "Loads an ITM file from disk",
            "args": {
              "ItemFile": "String of full path and file name including '.ITM' extension."
            },
            "returns": "Boolean Flag indicating if loading of ITM file was successful."
          },
          "id": "Load"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [],
          "info": {
            "desc": "Refreshes all costs of the Item.",
            "returns": "Nothing",
            "remarks": "Call after making any change to the Item that may affect cost."
          },
          "id": "RefreshCosts"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Remove all holes added to Item.",
            "returns": "Boolean Flag indicating if hole removal was successful."
          },
          "id": "RemoveHoles"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "",
              "id": "ItemFile"
            }
          ],
          "info": {
            "desc": "Save an ITM file to disk.",
            "args": {
              "ItemFile": ""
            },
            "returns": "Boolean Flag indicating if saving of the ITM file was successful."
          },
          "id": "Save"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number of development part to set the flag of.",
              "id": "DevNumber"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": false,
              "notes": "Boolean flag toggling the 'Do Not Cut' property of the development.",
              "id": "DoNotCut"
            }
          ],
          "info": {
            "desc": "Set Flag on a development part indicating if it should not be cut.",
            "args": {
              "DevNumber": "Number of development part to set the flag of.",
              "DoNotCut": "Boolean flag toggling the 'Do Not Cut' property of the development."
            },
            "returns": "Boolean Flag indicating of toggling flag was successful or not.",
            "remarks": "Use the 'Item.PartsCut' property first to determine the number of parts available\r\nin the Item to help determine which development number(s) you may want to toggle."
          },
          "id": "SetDevNotCutFlag"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number between 0 and 3. 0='Not Set', 1='Supply', 2='Return', 3='None'",
              "id": "FlowType"
            },
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number representing flow value in standard flow units.",
              "id": "FlowValue"
            }
          ],
          "info": {
            "desc": "Set Flow Type and Value on an Item.",
            "args": {
              "FlowType": "Number between 0 and 3. 0='Not Set', 1='Supply', 2='Return', 3='None'",
              "FlowValue": "Number representing flow value in standard flow units."
            },
            "returns": "Boolean Flag indicating success or failure. Failure implies an invalid type."
          },
          "id": "SetFlow"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [],
          "info": {
            "desc": "Refreshes Item's developments.",
            "returns": "Nothing",
            "remarks": "Call after making any change to the Item that may developments, specifiction or model."
          },
          "id": "Update"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of full path and file name to export.",
              "id": "DXFFile"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": true,
              "notes": "Optional Boolean Flag indicating if Lead Ins/Outs should be written to DXF.",
              "id": "IncludeLeads"
            }
          ],
          "info": {
            "desc": "Save Item's Developments as DXF File(s).",
            "args": {
              "DXFFile": "String of full path and file name to export.",
              "IncludeLeads": "Optional Boolean Flag indicating if Lead Ins/Outs should be written to DXF."
            },
            "remarks": "File to save should exclude the '.DXF' file extension.\r\nFlag for writing Lead Ins/Outs defaults to TRUE if ommited.\r\nEach development is appended with a '-1', '-2', '-3', etc. suffix to the specified file name."
          },
          "id": "WriteDXF"
        }
      ],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of AirTurns in the AIRTURN Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Airturns"
        },
        {
          "returns": [
            "AIRTURN[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of AIRTURN Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Airturns' property returns a value >= 1 before using Item.Airturn[index#/name]"
          },
          "id": "Airturn"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alias property of the ITEM Object."
          },
          "id": "Alias"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alternate property of the ITEM Object."
          },
          "id": "Alternate"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Bitmap (Image File Name) of the ITEM Object.",
            "remarks": "May be full, relative Path, just Filename or blank for default. May be a BMP or PNG image type.\r\nPNG image type recommended for reduced file size and performance."
          },
          "id": "Bitmap"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the BoughtOut Flag of the ITEM Object."
          },
          "id": "BoughtOut"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Box property of the ITEM Object."
          },
          "id": "Box"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Button Code Alias that the ITEM Object was taken off with."
          },
          "id": "ButtonAlias"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ButtonCode that the ITEM Object was taken off with."
          },
          "id": "ButtonCode"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CADBlock name associated with the ITEM Object."
          },
          "id": "CADBlock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Catalog Flag of the ITEM Object.",
            "readonly": true
          },
          "id": "Catalogue"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the CID number of the ITEM Object.",
            "remarks": "CID is not guarenteed to be the same as the Pattern Number. Best practice is to not\r\nchange the CID value which defaults to the Pattern Number without very specific reasons and\r\nknowledge of it's impact."
          },
          "id": "CID"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Comment text of the ITEM Object.",
            "remarks": "Supports multi-line text and may contain Carriage Returns."
          },
          "id": "Comment"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Connectors in the CONNECTOR Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Connectors"
        },
        {
          "returns": [
            "CONNECTOR[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of CONNECTOR Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Connectors' property returns a value >= 1 before using Item.Connector[index#/name]"
          },
          "id": "Connector"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the CostByLength (Cost Units) Flag of the ITEM Object.",
            "remarks": "Cost Units are set by the CostByLength flag. 0 = Cost by Qty, 1 = Cost by Ft."
          },
          "id": "CostByLength"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CostType property of the ITEM Object.",
            "remarks": "Valid CostType values are...'Demolition', 'Free Issue', 'Normal', 'Relocation' and 'Supply Only'."
          },
          "id": "CostType"
        },
        {
          "returns": [
            "CUSTOMDEF[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of CUSTOM DATA Objects for the ITEM Object.",
            "remarks": "There is no way to itterate over this array, you need to be aware of the custom data indices or names that exist in your database."
          },
          "id": "CustomData"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CutType property of the ITEM Object.",
            "remarks": "Alowwed values of CutType vary depending on the ITM's Pattern Number."
          },
          "id": "CutType"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Dampers in the DAMPER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Dampers"
        },
        {
          "returns": [
            "DAMPER[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of DAMPER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Dampers' property returns a value >= 1 before using Item.Dampers[index#/name]"
          },
          "id": "Damper"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Database ID property of the ITEM Object."
          },
          "id": "DatabaseID"
        },
        {
          "returns": [
            "DBLOCKINFO"
          ],
          "info": {
            "desc": "This gets the DBLOCKINFO Object of the ITEM Object."
          },
          "id": "DBLock"
        },
        {
          "returns": [
            "DECOILERINFO"
          ],
          "info": {
            "desc": "This gets the DECOILERINFO Object of the ITEM Object."
          },
          "id": "Decoiler"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Description of the ITEM Object."
          },
          "id": "Description"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Dimensions in the DIM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Dims"
        },
        {
          "returns": [
            "DIM[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of DIM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Dims' property returns a value >= 1 before using Item.Dim[index#/name]"
          },
          "id": "Dim"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Dimension Side Flag of the ITEM Object.",
            "remarks": "Possible values are 'Inside', 'Outside' and 'None'.\r\nIf DoubleWall, this flag controls whether dimensions are inside or outside sizes.\r\nIf not DoubleWall and Insulation is inside, this also controls whether dimensions\r\nare inside or outside sizes. This setting is remembered seperately for DoubleWall\r\nor not DoubleWall. Ensure DoubleWall is set correctly before changing."
          },
          "id": "DimSide"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the DimSide Flag of the ITEM Object."
          },
          "id": "DimSideLock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the DoubleWall Flag of the ITEM Object."
          },
          "id": "DoubleWall"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Drawing property of the ITEM Object."
          },
          "id": "Drawing"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the DoubleWall Flag of the ITEM Object."
          },
          "id": "DWLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the E-Tag property of the ITEM Object."
          },
          "id": "ETag"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time.\r\nExtra ETime is expressed in terms of units specified by the ExtraETimeUnits property."
          },
          "id": "ExtraETime"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time Rate of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time.\r\nExtraETimeRate can be specified by Rate 'Name' or Index."
          },
          "id": "ExtraETimeRate"
        },
        {
          "returns": [
            "TIMEUNITS"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time Units of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time."
          },
          "id": "ExtraETimeUnits"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'.\r\nExtra FTime is expressed in terms of units specified by the ExtraFTimeUnits property."
          },
          "id": "ExtraFTime"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time Rate of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'.\r\nExtraFTimeRate can be specified by Rate 'Name' or Index."
          },
          "id": "ExtraFTimeRate"
        },
        {
          "returns": [
            "TIMEUNITS"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time Units of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'."
          },
          "id": "ExtraFTimeUnits"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Fabrication Table Name property of the ITEM Object.",
            "remarks": "Only the Table Name is given, not the Group. Autodesk documentation INCORRECTLY\r\nindicates the Table Name includes the Group (e.g. 'Group: Name'). Value is subject to\r\nchange if this Autodesk defect is corrected in future releases."
          },
          "id": "FabTable"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Fabrication Table property of the ITEM Object."
          },
          "id": "FabTableLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Facing Name of the ITEM Object.",
            "remarks": "Facing Name only is given. Facing Group is not given as part of the value."
          },
          "id": "Facing"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Facing property of the ITEM Object."
          },
          "id": "FacingLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ITM Filename of the ITEM Object.",
            "remarks": "Filename is given without the ITM file extension."
          },
          "id": "Filename"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the FixRelative Flag of the ITEM Object."
          },
          "id": "FixRelative"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Material Gauge of the ITEM Object.",
            "remarks": "For Material Types 'Linear Ductwork' and 'For Machines', Gauge gives the Material Thickness.\r\nFor Material Types 'Pipework', 'Electrical Containment' and 'Undefined' Gauge gives the\r\nMaterial Index Number as entered in the material (e.g. May be a decimal)."
          },
          "id": "Gauge"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Gauge property of the ITEM Object."
          },
          "id": "GaugeLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the 32-Bit GUID Scan Code of the ITEM Object.",
            "readonly": true
          },
          "id": "Guid"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the 64-Bit GUID Scan Code of the ITEM Object.",
            "readonly": true
          },
          "id": "Guid64"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Handle of the ITEM Object.",
            "readonly": true
          },
          "id": "Handle"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the HasProduct Flag of the ITEM Object.",
            "readonly": true,
            "remarks": "A value of True or 0 indicates the ITEM is product listed."
          },
          "id": "HasProduct"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Insualtion Specification Group & Name (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Property may also be set to 'Not Set' or 'Off' preset values."
          },
          "id": "InsSpec"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Installation Table Name property of the ITEM Object.",
            "remarks": "Only the Table Name is given, not the Group. Autodesk documentation INCORRECTLY\r\nindicates the Table Name includes the Group (e.g. 'Group: Name'). Value is subject to\r\nchange if Autodesk defect is corrected in future releases."
          },
          "id": "InstallTable"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the InstallTable property of the ITEM OBject."
          },
          "id": "InstallTableLock"
        },
        {
          "returns": [
            "INSULATION"
          ],
          "info": {
            "desc": "Get Insulation Object of the ITEM Object.",
            "readonly": true
          },
          "id": "Insulation"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Insualtion Specification property of the ITEM Object."
          },
          "id": "ISpecLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Library property of the ITEM OBject.",
            "readonly": true,
            "remarks": "The dominant library for the ITM. Possible values are 'Ductboard', 'Electrical', 'Equipment',\r\n'Fabrication', 'Flat Oval', Free Entry', 'Furniture', 'Pipework', 'Profiled', 'Rectangular',\r\n'Round', 'Standard', 'Structure', 'Sub Assembly' or 'Unknown'."
          },
          "id": "Library"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Lifespan (in Years) of the ITEM Object."
          },
          "id": "Lifespan"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Links in the LINK Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Links"
        },
        {
          "returns": [
            "LINK[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of LINK Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Links' property returns a value >= 1 before using Item.Link[index#/name]"
          },
          "id": "Link"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Old Statuses in the History of the ITEM Object.",
            "readonly": true
          },
          "id": "ManyOldStatus"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Material Abreviation of the ITEM Object.",
            "readonly": true
          },
          "id": "MatAbrv"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Material Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "Material"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Nest Priority of the ITEM Object.",
            "remarks": "Items with a higher number nest first giving preference to those items in the nesting process."
          },
          "id": "NestPriority"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Notes property of the ITEM Object."
          },
          "id": "Notes"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Number property of the ITEM Object."
          },
          "id": "Number"
        },
        {
          "returns": [
            "STATUS[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of STATUS Objects of the ITEM Object."
          },
          "id": "OldStatus"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Operating Cost (per Year) of the ITEM Object."
          },
          "id": "OperatingCost"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Options in the OPTION Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Options"
        },
        {
          "returns": [
            "OPTION[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of OPTION Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Options' property returns a value >= 1 before using Item.Option[index#/name]"
          },
          "id": "Option"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Order property of the ITEM Object."
          },
          "id": "Order"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Pallet property of the ITEM Object."
          },
          "id": "Pallet"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Number of Parts to Cut of the ITEM Object.",
            "readonly": true
          },
          "id": "PartsCut"
        },
        {
          "returns": [
            "BOOLEAN[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of Cut Statuses of the ITEM Object.",
            "readonly": true
          },
          "id": "PartCut"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Path property of the ITEM Object.",
            "remarks": "Path includes the terminating slash (/). Note that folder seperators are\r\nforward slashes (/) as opposed to backslashes (\\) which are more commonly seen."
          },
          "id": "Path"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Pattern Number of the ITEM Object.",
            "readonly": true,
            "remarks": "Unlike CID, Pattern Number is the true Pattern for the ITM and can not be changed.\r\nThis property is only available in Fabrication 2019.1 versions and later."
          },
          "id": "PatNo"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the PCF SKey property of the ITEM Object.",
            "remarks": "Available in Fabrication 2017 versions and later."
          },
          "id": "PCFSKey"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Price List Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "PriceList"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the Price List property of the ITEM Object."
          },
          "id": "PriceTableLock"
        },
        {
          "returns": [
            "PRODUCTINFO"
          ],
          "info": {
            "desc": "This gets the PRODUCTINFO Object of the ITEM Object."
          },
          "id": "Product"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Item Quantity property of the ITEM Object."
          },
          "id": "Qty"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Scale Factor of the ITEM Object."
          },
          "id": "Scale"
        },
        {
          "returns": [
            "SEALENT"
          ],
          "info": {
            "desc": "This gets the SEALENT Object of the ITEM Object."
          },
          "id": "Sealant"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "If applicable gets the number of Seams in the SEAM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Seams"
        },
        {
          "returns": [
            "SEAM[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of SEAM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Seams' property returns a value >= 1 before using Item.Seam[index#]"
          },
          "id": "Seam"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Section Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Can be set by specifying 'Name' or 'Group:Name'. Can be reset by setting\r\nto 'None' or empty string ''."
          },
          "id": "Section"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Service Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "Service"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ServiceType property of the ITEM Object.",
            "remarks": "ServiceType can be set using the 'Name' or 'Index' of the desired ServieType."
          },
          "id": "ServiceType"
        },
        {
          "returns": [
            "CONNECTOR[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of Skin CONNECTOR Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Connectors' property returns a value >= 1 before using Item.SkinConnector[index#]"
          },
          "id": "SkinConnector"
        },
        {
          "returns": [
            "DECOILERINFO"
          ],
          "info": {
            "desc": "This gets the Skin DECOILERINFO Object of the ITEM Object."
          },
          "id": "SkinDecoiler"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Skin Gauge (thinckness) for the Skin Material of the ITEM Object.",
            "remarks": "Only valid if DoubleWall flag is set."
          },
          "id": "SkinGauge"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Skin Material Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Only valid if DoubleWall flag is set."
          },
          "id": "SkinMaterial"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Skin Material property of the ITEM Object."
          },
          "id": "SkinMaterialLock"
        },
        {
          "returns": [
            "SEAM[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of Skin SEAM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Seams' property returns a value >= 1 before using Item.SkinSeam[index#]"
          },
          "id": "SkinSeam"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Skin Side property of the ITEM OBject.",
            "remarks": "Only valid if DoubleWall flag is set. Possible values are 'Inside' or 'Outside'."
          },
          "id": "SkinSide"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Specification Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Can be set by specifying 'Name' or 'Group:Name'. Can be reset by setting\r\nto 'None' or empty string ''."
          },
          "id": "Specification"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Specification property of the ITEM Object."
          },
          "id": "SpecLock"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Splitters in the SPLITTER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Splitters"
        },
        {
          "returns": [
            "SPLITTER[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of SPLITTER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Splitters' property returns a value >= 1 before using Item.Splitter[index#]"
          },
          "id": "Splitter"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Spool Name property of the ITEM Object."
          },
          "id": "Spool"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Spool Color property of the ITEM Object."
          },
          "id": "SpoolColour"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Status property of the ITEM Object.",
            "remarks": "Status can be set using the 'Name' or 'Index' of the desired Status."
          },
          "id": "Status"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Stiffeners in the STIFFENER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Stiffeners"
        },
        {
          "returns": [
            "STIFFENER[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of STIFFENER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Stiffeners' property returns a value >= 1 before using Item.Stiffener[index#]"
          },
          "id": "Stiffener"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Structure Type of ITEM Object.",
            "remarks": "StructureType can be set using the 'Name' or 'Index' however this property is not able to be\r\nread. It can only be set in Autodesk Fabrication versions 2022 and later. Earlier versions\r\nthe property is 'Write-Only'."
          },
          "id": "StructureType"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Sub Items in a Sub Assembly for the SUBITEM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "SubItems"
        },
        {
          "returns": [
            "ITEM[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of ITEM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'SubItems' property returns a value >= 1 before using Item.SubItem[index#]"
          },
          "id": "SubItem"
        },
        {
          "returns": [
            "SUPPORT"
          ],
          "info": {
            "desc": "This gets the SUPPORT Object of the ITEM Object."
          },
          "id": "Support"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Type property of the ITEM Object.",
            "readonly": true,
            "remarks": "Property can list one or more library types combined and seperated by a slash. Possible values\r\nare 'Ductboard','Electrical', 'Equipment', 'Fabrication', 'Flat Oval', Free Entry', 'Furniture',\r\n'Pipework', 'Profiled', 'Rectangular', 'Round', 'Standard', 'Structure', 'Sub Assembly' or 'Unknown'."
          },
          "id": "Type"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Weight (in base units) of the ITEM Object.",
            "remarks": "If Costed by Length, Weight will be returned as per Meter/Foot otherwise by Quantity."
          },
          "id": "Weight"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Weight property of the ITEM Object."
          },
          "id": "WeightLock"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Material Wire Gauge of the ITEM Object."
          },
          "id": "WireGauge"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "GetSet the Zone property of the ITEM Object."
          },
          "id": "Zone"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/ITEMSTRUCT-Object.md",
      "id": "ITEMSTRUCT"
    },
    "ITEM": {
      "constructor": null,
      "methods": [
        {
          "returns": [
            "VOID"
          ],
          "args": [
            {
              "types": [
                "STRING",
                "NUMBER"
              ],
              "optional": false,
              "notes": "",
              "id": "NameOrIndex"
            }
          ],
          "info": {
            "desc": "Dynamically adds Custom Data to the item (for 'User' custom data types)",
            "args": {
              "NameOrIndex": ""
            },
            "returns": "Nothing",
            "remarks": "This function merely added the specified 'User' Custom Data 'Field' to the Item. Once the\r\nfield is added, you can set a value using the Custom Data property Item.CustomData[name/index#].Value"
          },
          "id": "AddCustomData"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of the URL to use for the Link.",
              "id": "Link"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String description of the Link.",
              "id": "Description"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String page on the link to go to. e.g. '#Page=2'.",
              "id": "Page"
            }
          ],
          "info": {
            "desc": "Adds a Hyperlink to the Links tab of the Item Properties.",
            "args": {
              "Link": "String of the URL to use for the Link.",
              "Description": "String description of the Link.",
              "Page": "String page on the link to go to. e.g. '#Page=2'."
            },
            "returns": "Number representing the number of the link added."
          },
          "id": "AddLink"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "",
              "id": "ItmFilePath"
            }
          ],
          "info": {
            "desc": "Gets the file name of the Image used for a ITM.",
            "args": {
              "ItmFilePath": ""
            },
            "returns": "String representing path and name of the image file."
          },
          "id": "BitmapFile"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Indicates if the Item supports DoubleWall entry or not.",
            "returns": "Boolean"
          },
          "id": "CanDoubleWall"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Indicates if the Item supports Rotary Nesting or not.",
            "returns": "Boolean"
          },
          "id": "CanRotary"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number of link to remove from the Item.",
              "id": "LinkNumber"
            }
          ],
          "info": {
            "desc": "Removes a Link from the Links tab of the Item Properties.",
            "args": {
              "LinkNumber": "Number of link to remove from the Item."
            },
            "returns": "Boolean Flag indicating if link deletion was successful or not."
          },
          "id": "DeleteLink"
        },
        {
          "returns": [
            "STRING"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "This index number is associated with the connector number shown in the edit item dialog.",
              "id": "ConnectorIndex"
            },
            {
              "types": [
                "STRING"
              ],
              "optional": true,
              "notes": "Optional string representing an X, Y or Z portion of the connector centerline coordinate.",
              "id": "XYZ"
            }
          ],
          "info": {
            "desc": "Gets a string representing the location of a connectors X, Y and/or Z value.",
            "args": {
              "ConnectorIndex": "This index number is associated with the connector number shown in the edit item dialog.",
              "XYZ": "Optional string representing an X, Y or Z portion of the connector centerline coordinate."
            },
            "returns": "String representing the X, Y, Z or all 3 if XYZ was not provided.",
            "remarks": "Supported values are...'XYZ', 'X', 'Y', 'Z', 'TOP' and 'BTM'.\r\nThe string 'XYZ', missing parameters, empty strings or any other non supported value returns\r\na string representing the X, Y & Z coordinates seperated by spaces (e.g. '1.25 4.54 0.00').\r\nIf the string 'X', 'Y' or 'Z' is speified, a string representing just that compoentent of the\r\nendpoint is returned.\r\nIf the string 'TOP' or 'BTM' is specified, a string representing the Z coordinate of the connector's\r\nTop or Bottom is returned."
          },
          "id": "EndLocation"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "Allowed values are \"Soffit\" and \"Floor\".",
              "id": "LevelName"
            }
          ],
          "info": {
            "desc": "Get the Level value of the specified Item based on it's section.",
            "args": {
              "LevelName": "Allowed values are \"Soffit\" and \"Floor\"."
            },
            "returns": "Number representing the Soffit/Floor level of the Item's Section."
          },
          "id": "Level"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of full path and file name including '.ITM' extension.",
              "id": "ItemFile"
            }
          ],
          "info": {
            "desc": "Loads an ITM file from disk",
            "args": {
              "ItemFile": "String of full path and file name including '.ITM' extension."
            },
            "returns": "Boolean Flag indicating if loading of ITM file was successful."
          },
          "id": "Load"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [],
          "info": {
            "desc": "Refreshes all costs of the Item.",
            "returns": "Nothing",
            "remarks": "Call after making any change to the Item that may affect cost."
          },
          "id": "RefreshCosts"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [],
          "info": {
            "desc": "Remove all holes added to Item.",
            "returns": "Boolean Flag indicating if hole removal was successful."
          },
          "id": "RemoveHoles"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "",
              "id": "ItemFile"
            }
          ],
          "info": {
            "desc": "Save an ITM file to disk.",
            "args": {
              "ItemFile": ""
            },
            "returns": "Boolean Flag indicating if saving of the ITM file was successful."
          },
          "id": "Save"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number of development part to set the flag of.",
              "id": "DevNumber"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": false,
              "notes": "Boolean flag toggling the 'Do Not Cut' property of the development.",
              "id": "DoNotCut"
            }
          ],
          "info": {
            "desc": "Set Flag on a development part indicating if it should not be cut.",
            "args": {
              "DevNumber": "Number of development part to set the flag of.",
              "DoNotCut": "Boolean flag toggling the 'Do Not Cut' property of the development."
            },
            "returns": "Boolean Flag indicating of toggling flag was successful or not.",
            "remarks": "Use the 'Item.PartsCut' property first to determine the number of parts available\r\nin the Item to help determine which development number(s) you may want to toggle."
          },
          "id": "SetDevNotCutFlag"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number between 0 and 3. 0='Not Set', 1='Supply', 2='Return', 3='None'",
              "id": "FlowType"
            },
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number representing flow value in standard flow units.",
              "id": "FlowValue"
            }
          ],
          "info": {
            "desc": "Set Flow Type and Value on an Item.",
            "args": {
              "FlowType": "Number between 0 and 3. 0='Not Set', 1='Supply', 2='Return', 3='None'",
              "FlowValue": "Number representing flow value in standard flow units."
            },
            "returns": "Boolean Flag indicating success or failure. Failure implies an invalid type."
          },
          "id": "SetFlow"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [],
          "info": {
            "desc": "Refreshes Item's developments.",
            "returns": "Nothing",
            "remarks": "Call after making any change to the Item that may developments, specifiction or model."
          },
          "id": "Update"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "args": [
            {
              "types": [
                "STRING"
              ],
              "optional": false,
              "notes": "String of full path and file name to export.",
              "id": "DXFFile"
            },
            {
              "types": [
                "BOOLEAN"
              ],
              "optional": true,
              "notes": "Optional Boolean Flag indicating if Lead Ins/Outs should be written to DXF.",
              "id": "IncludeLeads"
            }
          ],
          "info": {
            "desc": "Save Item's Developments as DXF File(s).",
            "args": {
              "DXFFile": "String of full path and file name to export.",
              "IncludeLeads": "Optional Boolean Flag indicating if Lead Ins/Outs should be written to DXF."
            },
            "remarks": "File to save should exclude the '.DXF' file extension.\r\nFlag for writing Lead Ins/Outs defaults to TRUE if ommited.\r\nEach development is appended with a '-1', '-2', '-3', etc. suffix to the specified file name."
          },
          "id": "WriteDXF"
        }
      ],
      "properties": [
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of AirTurns in the AIRTURN Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Airturns"
        },
        {
          "returns": [
            "AIRTURN[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of AIRTURN Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Airturns' property returns a value >= 1 before using Item.Airturn[index#/name]"
          },
          "id": "Airturn"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alias property of the ITEM Object."
          },
          "id": "Alias"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Alternate property of the ITEM Object."
          },
          "id": "Alternate"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Bitmap (Image File Name) of the ITEM Object.",
            "remarks": "May be full, relative Path, just Filename or blank for default. May be a BMP or PNG image type.\r\nPNG image type recommended for reduced file size and performance."
          },
          "id": "Bitmap"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the BoughtOut Flag of the ITEM Object."
          },
          "id": "BoughtOut"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Box property of the ITEM Object."
          },
          "id": "Box"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Button Code Alias that the ITEM Object was taken off with."
          },
          "id": "ButtonAlias"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ButtonCode that the ITEM Object was taken off with."
          },
          "id": "ButtonCode"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CADBlock name associated with the ITEM Object."
          },
          "id": "CADBlock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Catalog Flag of the ITEM Object.",
            "readonly": true
          },
          "id": "Catalogue"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the CID number of the ITEM Object.",
            "remarks": "CID is not guarenteed to be the same as the Pattern Number. Best practice is to not\r\nchange the CID value which defaults to the Pattern Number without very specific reasons and\r\nknowledge of it's impact."
          },
          "id": "CID"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Comment text of the ITEM Object.",
            "remarks": "Supports multi-line text and may contain Carriage Returns."
          },
          "id": "Comment"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Connectors in the CONNECTOR Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Connectors"
        },
        {
          "returns": [
            "CONNECTOR[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of CONNECTOR Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Connectors' property returns a value >= 1 before using Item.Connector[index#/name]"
          },
          "id": "Connector"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the CostByLength (Cost Units) Flag of the ITEM Object.",
            "remarks": "Cost Units are set by the CostByLength flag. 0 = Cost by Qty, 1 = Cost by Ft."
          },
          "id": "CostByLength"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CostType property of the ITEM Object.",
            "remarks": "Valid CostType values are...'Demolition', 'Free Issue', 'Normal', 'Relocation' and 'Supply Only'."
          },
          "id": "CostType"
        },
        {
          "returns": [
            "CUSTOMDEF[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of CUSTOM DATA Objects for the ITEM Object.",
            "remarks": "There is no way to itterate over this array, you need to be aware of the custom data indices or names that exist in your database."
          },
          "id": "CustomData"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the CutType property of the ITEM Object.",
            "remarks": "Alowwed values of CutType vary depending on the ITM's Pattern Number."
          },
          "id": "CutType"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Dampers in the DAMPER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Dampers"
        },
        {
          "returns": [
            "DAMPER[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of DAMPER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Dampers' property returns a value >= 1 before using Item.Dampers[index#/name]"
          },
          "id": "Damper"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Database ID property of the ITEM Object."
          },
          "id": "DatabaseID"
        },
        {
          "returns": [
            "DBLOCKINFO"
          ],
          "info": {
            "desc": "This gets the DBLOCKINFO Object of the ITEM Object."
          },
          "id": "DBLock"
        },
        {
          "returns": [
            "DECOILERINFO"
          ],
          "info": {
            "desc": "This gets the DECOILERINFO Object of the ITEM Object."
          },
          "id": "Decoiler"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Description of the ITEM Object."
          },
          "id": "Description"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Dimensions in the DIM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Dims"
        },
        {
          "returns": [
            "DIM[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of DIM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Dims' property returns a value >= 1 before using Item.Dim[index#/name]"
          },
          "id": "Dim"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Dimension Side Flag of the ITEM Object.",
            "remarks": "Possible values are 'Inside', 'Outside' and 'None'.\r\nIf DoubleWall, this flag controls whether dimensions are inside or outside sizes.\r\nIf not DoubleWall and Insulation is inside, this also controls whether dimensions\r\nare inside or outside sizes. This setting is remembered seperately for DoubleWall\r\nor not DoubleWall. Ensure DoubleWall is set correctly before changing."
          },
          "id": "DimSide"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the DimSide Flag of the ITEM Object."
          },
          "id": "DimSideLock"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the DoubleWall Flag of the ITEM Object."
          },
          "id": "DoubleWall"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Drawing property of the ITEM Object."
          },
          "id": "Drawing"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the DoubleWall Flag of the ITEM Object."
          },
          "id": "DWLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the E-Tag property of the ITEM Object."
          },
          "id": "ETag"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time.\r\nExtra ETime is expressed in terms of units specified by the ExtraETimeUnits property."
          },
          "id": "ExtraETime"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time Rate of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time.\r\nExtraETimeRate can be specified by Rate 'Name' or Index."
          },
          "id": "ExtraETimeRate"
        },
        {
          "returns": [
            "TIMEUNITS"
          ],
          "info": {
            "desc": "Get/Set the Extra Install Time Units of the ITEM Object.",
            "remarks": "The 'E' in ETime stands for 'Erection' or Installation Time."
          },
          "id": "ExtraETimeUnits"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'.\r\nExtra FTime is expressed in terms of units specified by the ExtraFTimeUnits property."
          },
          "id": "ExtraFTime"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time Rate of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'.\r\nExtraFTimeRate can be specified by Rate 'Name' or Index."
          },
          "id": "ExtraFTimeRate"
        },
        {
          "returns": [
            "TIMEUNITS"
          ],
          "info": {
            "desc": "Get/Set the Extra Fabrication Time Units of the ITEM Object.",
            "remarks": "The 'F' in FTime stands for 'Fabrication'."
          },
          "id": "ExtraFTimeUnits"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Fabrication Table Name property of the ITEM Object.",
            "remarks": "Only the Table Name is given, not the Group. Autodesk documentation INCORRECTLY\r\nindicates the Table Name includes the Group (e.g. 'Group: Name'). Value is subject to\r\nchange if this Autodesk defect is corrected in future releases."
          },
          "id": "FabTable"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Fabrication Table property of the ITEM Object."
          },
          "id": "FabTableLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Facing Name of the ITEM Object.",
            "remarks": "Facing Name only is given. Facing Group is not given as part of the value."
          },
          "id": "Facing"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Facing property of the ITEM Object."
          },
          "id": "FacingLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ITM Filename of the ITEM Object.",
            "remarks": "Filename is given without the ITM file extension."
          },
          "id": "Filename"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the FixRelative Flag of the ITEM Object."
          },
          "id": "FixRelative"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Material Gauge of the ITEM Object.",
            "remarks": "For Material Types 'Linear Ductwork' and 'For Machines', Gauge gives the Material Thickness.\r\nFor Material Types 'Pipework', 'Electrical Containment' and 'Undefined' Gauge gives the\r\nMaterial Index Number as entered in the material (e.g. May be a decimal)."
          },
          "id": "Gauge"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Gauge property of the ITEM Object."
          },
          "id": "GaugeLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the 32-Bit GUID Scan Code of the ITEM Object.",
            "readonly": true
          },
          "id": "Guid"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the 64-Bit GUID Scan Code of the ITEM Object.",
            "readonly": true
          },
          "id": "Guid64"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Handle of the ITEM Object.",
            "readonly": true
          },
          "id": "Handle"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the HasProduct Flag of the ITEM Object.",
            "readonly": true,
            "remarks": "A value of True or 0 indicates the ITEM is product listed."
          },
          "id": "HasProduct"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Insualtion Specification Group & Name (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Property may also be set to 'Not Set' or 'Off' preset values."
          },
          "id": "InsSpec"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Installation Table Name property of the ITEM Object.",
            "remarks": "Only the Table Name is given, not the Group. Autodesk documentation INCORRECTLY\r\nindicates the Table Name includes the Group (e.g. 'Group: Name'). Value is subject to\r\nchange if Autodesk defect is corrected in future releases."
          },
          "id": "InstallTable"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the InstallTable property of the ITEM OBject."
          },
          "id": "InstallTableLock"
        },
        {
          "returns": [
            "INSULATION"
          ],
          "info": {
            "desc": "Get Insulation Object of the ITEM Object.",
            "readonly": true
          },
          "id": "Insulation"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Insualtion Specification property of the ITEM Object."
          },
          "id": "ISpecLock"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Library property of the ITEM OBject.",
            "readonly": true,
            "remarks": "The dominant library for the ITM. Possible values are 'Ductboard', 'Electrical', 'Equipment',\r\n'Fabrication', 'Flat Oval', Free Entry', 'Furniture', 'Pipework', 'Profiled', 'Rectangular',\r\n'Round', 'Standard', 'Structure', 'Sub Assembly' or 'Unknown'."
          },
          "id": "Library"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Lifespan (in Years) of the ITEM Object."
          },
          "id": "Lifespan"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Links in the LINK Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Links"
        },
        {
          "returns": [
            "LINK[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of LINK Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Links' property returns a value >= 1 before using Item.Link[index#/name]"
          },
          "id": "Link"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Old Statuses in the History of the ITEM Object.",
            "readonly": true
          },
          "id": "ManyOldStatus"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Material Abreviation of the ITEM Object.",
            "readonly": true
          },
          "id": "MatAbrv"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Material Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "Material"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Nest Priority of the ITEM Object.",
            "remarks": "Items with a higher number nest first giving preference to those items in the nesting process."
          },
          "id": "NestPriority"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Notes property of the ITEM Object."
          },
          "id": "Notes"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Number property of the ITEM Object."
          },
          "id": "Number"
        },
        {
          "returns": [
            "STATUS[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of STATUS Objects of the ITEM Object."
          },
          "id": "OldStatus"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Operating Cost (per Year) of the ITEM Object."
          },
          "id": "OperatingCost"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Options in the OPTION Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Options"
        },
        {
          "returns": [
            "OPTION[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of OPTION Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Options' property returns a value >= 1 before using Item.Option[index#/name]"
          },
          "id": "Option"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Order property of the ITEM Object."
          },
          "id": "Order"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Pallet property of the ITEM Object."
          },
          "id": "Pallet"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Number of Parts to Cut of the ITEM Object.",
            "readonly": true
          },
          "id": "PartsCut"
        },
        {
          "returns": [
            "BOOLEAN[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of Cut Statuses of the ITEM Object.",
            "readonly": true
          },
          "id": "PartCut"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Path property of the ITEM Object.",
            "remarks": "Path includes the terminating slash (/). Note that folder seperators are\r\nforward slashes (/) as opposed to backslashes (\\) which are more commonly seen."
          },
          "id": "Path"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the Pattern Number of the ITEM Object.",
            "readonly": true,
            "remarks": "Unlike CID, Pattern Number is the true Pattern for the ITM and can not be changed.\r\nThis property is only available in Fabrication 2019.1 versions and later."
          },
          "id": "PatNo"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the PCF SKey property of the ITEM Object.",
            "remarks": "Available in Fabrication 2017 versions and later."
          },
          "id": "PCFSKey"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Price List Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "PriceList"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status for the Price List property of the ITEM Object."
          },
          "id": "PriceTableLock"
        },
        {
          "returns": [
            "PRODUCTINFO"
          ],
          "info": {
            "desc": "This gets the PRODUCTINFO Object of the ITEM Object."
          },
          "id": "Product"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Item Quantity property of the ITEM Object."
          },
          "id": "Qty"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Scale Factor of the ITEM Object."
          },
          "id": "Scale"
        },
        {
          "returns": [
            "SEALENT"
          ],
          "info": {
            "desc": "This gets the SEALENT Object of the ITEM Object."
          },
          "id": "Sealant"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "If applicable gets the number of Seams in the SEAM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Seams"
        },
        {
          "returns": [
            "SEAM[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of SEAM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Seams' property returns a value >= 1 before using Item.Seam[index#]"
          },
          "id": "Seam"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Section Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Can be set by specifying 'Name' or 'Group:Name'. Can be reset by setting\r\nto 'None' or empty string ''."
          },
          "id": "Section"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Service Name & Group (e.g. 'Group: Name') of the ITEM Object."
          },
          "id": "Service"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the ServiceType property of the ITEM Object.",
            "remarks": "ServiceType can be set using the 'Name' or 'Index' of the desired ServieType."
          },
          "id": "ServiceType"
        },
        {
          "returns": [
            "CONNECTOR[]"
          ],
          "info": {
            "desc": "If applicable, this gets an array of Skin CONNECTOR Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Connectors' property returns a value >= 1 before using Item.SkinConnector[index#]"
          },
          "id": "SkinConnector"
        },
        {
          "returns": [
            "DECOILERINFO"
          ],
          "info": {
            "desc": "This gets the Skin DECOILERINFO Object of the ITEM Object."
          },
          "id": "SkinDecoiler"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Skin Gauge (thinckness) for the Skin Material of the ITEM Object.",
            "remarks": "Only valid if DoubleWall flag is set."
          },
          "id": "SkinGauge"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Skin Material Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Only valid if DoubleWall flag is set."
          },
          "id": "SkinMaterial"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Skin Material property of the ITEM Object."
          },
          "id": "SkinMaterialLock"
        },
        {
          "returns": [
            "SEAM[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of Skin SEAM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Seams' property returns a value >= 1 before using Item.SkinSeam[index#]"
          },
          "id": "SkinSeam"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Skin Side property of the ITEM OBject.",
            "remarks": "Only valid if DoubleWall flag is set. Possible values are 'Inside' or 'Outside'."
          },
          "id": "SkinSide"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Specification Name & Group (e.g. 'Group: Name') of the ITEM Object.",
            "remarks": "Can be set by specifying 'Name' or 'Group:Name'. Can be reset by setting\r\nto 'None' or empty string ''."
          },
          "id": "Specification"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status flag for the Specification property of the ITEM Object."
          },
          "id": "SpecLock"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Splitters in the SPLITTER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Splitters"
        },
        {
          "returns": [
            "SPLITTER[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of SPLITTER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Splitters' property returns a value >= 1 before using Item.Splitter[index#]"
          },
          "id": "Splitter"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Spool Name property of the ITEM Object."
          },
          "id": "Spool"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Spool Color property of the ITEM Object."
          },
          "id": "SpoolColour"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Status property of the ITEM Object.",
            "remarks": "Status can be set using the 'Name' or 'Index' of the desired Status."
          },
          "id": "Status"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Stiffeners in the STIFFENER Array of the ITEM Object.",
            "readonly": true
          },
          "id": "Stiffeners"
        },
        {
          "returns": [
            "STIFFENER[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of STIFFENER Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'Stiffeners' property returns a value >= 1 before using Item.Stiffener[index#]"
          },
          "id": "Stiffener"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Structure Type of ITEM Object.",
            "remarks": "StructureType can be set using the 'Name' or 'Index' however this property is not able to be\r\nread. It can only be set in Autodesk Fabrication versions 2022 and later. Earlier versions\r\nthe property is 'Write-Only'."
          },
          "id": "StructureType"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get the number of Sub Items in a Sub Assembly for the SUBITEM Array of the ITEM Object.",
            "readonly": true
          },
          "id": "SubItems"
        },
        {
          "returns": [
            "ITEM[]"
          ],
          "info": {
            "desc": "If applicable this gets an array of ITEM Objects of the ITEM Object.",
            "remarks": "Always check to see if the 'SubItems' property returns a value >= 1 before using Item.SubItem[index#]"
          },
          "id": "SubItem"
        },
        {
          "returns": [
            "SUPPORT"
          ],
          "info": {
            "desc": "This gets the SUPPORT Object of the ITEM Object."
          },
          "id": "Support"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get the Type property of the ITEM Object.",
            "readonly": true,
            "remarks": "Property can list one or more library types combined and seperated by a slash. Possible values\r\nare 'Ductboard','Electrical', 'Equipment', 'Fabrication', 'Flat Oval', Free Entry', 'Furniture',\r\n'Pipework', 'Profiled', 'Rectangular', 'Round', 'Standard', 'Structure', 'Sub Assembly' or 'Unknown'."
          },
          "id": "Type"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Weight (in base units) of the ITEM Object.",
            "remarks": "If Costed by Length, Weight will be returned as per Meter/Foot otherwise by Quantity."
          },
          "id": "Weight"
        },
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get/Set the Lock Status of the Weight property of the ITEM Object."
          },
          "id": "WeightLock"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Material Wire Gauge of the ITEM Object."
          },
          "id": "WireGauge"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "GetSet the Zone property of the ITEM Object."
          },
          "id": "Zone"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/ITEM-Object.md",
      "id": "ITEM"
    },
    "TASK": {
      "constructor": null,
      "methods": [
        {
          "returns": [
            "VOID"
          ],
          "args": [
            {
              "types": [
                "NUMBER"
              ],
              "optional": false,
              "notes": "Number indicating the number of tasks to perform.",
              "id": "NumberOfTasks"
            }
          ],
          "info": {
            "desc": "Initialize and display progress bars setting maximum task length.",
            "args": {
              "NumberOfTasks": "Number indicating the number of tasks to perform."
            },
            "returns": "Nothing",
            "remarks": "NumberofTasks should ideally specify the number of iterations you go through so that the progress bars\r\ndialog shows a progress relative to the tasks you're performing. You must use the Task.Progress\r\nproperty to move the progress bars as your tasks processes."
          },
          "id": "BeginProgress"
        },
        {
          "returns": [
            "VOID"
          ],
          "args": [],
          "info": {
            "desc": "Terminate the display of the progress bars dialog.",
            "returns": "Nothing",
            "remarks": "Call to end the display of the progress bars dialog when tasks are finished processing.\r\nYou may use the Task.Aborted proeprty to determine if the user canceled the process. When the\r\nuser cancels the progress bars, this does not stop your tasks from processing, merely sets the\r\nAborted property. You must monitor the Aborted flag and exit the task processing in your code\r\nto propertly terminate a task by a user."
          },
          "id": "EndProgress"
        }
      ],
      "properties": [
        {
          "returns": [
            "BOOLEAN"
          ],
          "info": {
            "desc": "Get the Task Status Flag indicating if Task was aborted for the TASK Object.",
            "readonly": true
          },
          "id": "Aborted"
        },
        {
          "returns": [
            "STRING"
          ],
          "info": {
            "desc": "Get/Set the Message Text for the progress dialog for the TASK Object."
          },
          "id": "Message"
        },
        {
          "returns": [
            "NUMBER"
          ],
          "info": {
            "desc": "Get/Set the Progress Bar for the progress dialog for the TASK Object."
          },
          "id": "Progress"
        },
        {
          "returns": [
            "TASKSELECTION[]"
          ],
          "info": {
            "desc": "Gets an array of TASKSELECTION Objects of the TASK Object.",
            "remarks": "Always check to see if the 'Task.Selection.Count' property returns a value >= 1 before\r\nusing Task.Selection[index#]"
          },
          "id": "Selection"
        }
      ],
      "link": "https://github.com/AgileBIM/FabCOD/blob/main/docs/wiki/TASK-Object.md",
      "id": "TASK"
    }
  }
}